type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  questionFormIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): QuestionFormConnection
  questionFormCount: Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  questionFormList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): QuestionFormConnection
  questionFormListCount: Int!
}

"""A connection to a list of items."""
type QuestionFormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionFormEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type QuestionFormEdge {
  """The item at the end of the edge"""
  node: QuestionForm

  """A cursor for use in pagination"""
  cursor: String!
}

type QuestionForm implements Node {
  id: ID!
  type: String!
  question: String!
  user_answer: String!
}

type Mutation {
  createQuestionForm(input: CreateQuestionFormInput!): CreateQuestionFormPayload
  updateQuestionForm(input: UpdateQuestionFormInput!): UpdateQuestionFormPayload
}

type CreateQuestionFormPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: QuestionForm!
  clientMutationId: String
}

input CreateQuestionFormInput {
  content: QuestionFormInput!
  clientMutationId: String
}

input QuestionFormInput {
  type: String!
  question: String!
  user_answer: String!
}

type UpdateQuestionFormPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: QuestionForm!
  clientMutationId: String
}

input UpdateQuestionFormInput {
  id: ID!
  content: PartialQuestionFormInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialQuestionFormInput {
  type: String
  question: String
  user_answer: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")