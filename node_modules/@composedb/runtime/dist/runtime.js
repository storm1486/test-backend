function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
import { CeramicClient } from '@ceramicnetwork/http-client';
import { execute, parse, validate } from 'graphql';
import { createContext } from './context.js';
import { getSchema } from './utils.js';
var _context = /*#__PURE__*/ new WeakMap(), _schema = /*#__PURE__*/ new WeakMap();
/**
 * The ComposeRuntime class provides APIs to execute queries on a GraphQL schema generated from a
 * `RuntimeCompositeDefinition`. It allows applications to interact with documents using known
 * models on a Ceramic node.
 *
 * It is exported by the {@linkcode runtime} module.
 *
 * ```sh
 * import { ComposeRuntime } from '@composedb/runtime'
 * ```
 */ export class ComposeRuntime {
    /**
   * Context object used internally.
   */ get context() {
        return _class_private_field_get(this, _context);
    }
    /**
   * Execute a GraphQL query from a DocumentNode and optional variables.
   */ async execute(document, variableValues) {
        const errors = validate(_class_private_field_get(this, _schema), document);
        return errors.length > 0 ? {
            errors
        } : await execute({
            document,
            variableValues,
            contextValue: _class_private_field_get(this, _context),
            schema: _class_private_field_get(this, _schema)
        });
    }
    /**
   * Execute a GraphQL query from its source and optional variables.
   */ async executeQuery(source, variableValues) {
        let document;
        try {
            document = parse(source);
        } catch (syntaxError) {
            return {
                errors: [
                    syntaxError
                ]
            };
        }
        return await this.execute(document, variableValues);
    }
    constructor(params){
        _class_private_field_init(this, _context, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _schema, {
            writable: true,
            value: void 0
        });
        const { ceramic, context, definition, readonly, schema, ...contextParams } = params;
        const ceramicClient = typeof ceramic === 'string' ? new CeramicClient(ceramic) : ceramic;
        _class_private_field_set(this, _context, context ?? createContext({
            ...contextParams,
            ceramic: ceramicClient
        }));
        _class_private_field_set(this, _schema, getSchema({
            definition,
            readonly,
            schema
        }));
    }
}
