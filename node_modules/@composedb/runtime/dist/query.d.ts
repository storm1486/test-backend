import type { AnyValueFilter, BaseQuery, CeramicApi, ObjectFilter, Page, PaginationQuery, QueryFilters, StreamState } from '@ceramicnetwork/common';
import { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
import type { Connection, ConnectionArguments } from 'graphql-relay';
export type ConnectionQuery = BaseQuery & ConnectionArguments;
export declare function toPaginationQuery(source: ConnectionQuery): PaginationQuery;
export declare function toRelayConnection(ceramic: CeramicApi, page: Page<StreamState | null>): Connection<ModelInstanceDocument | null>;
export declare function queryConnection(ceramic: CeramicApi, query: ConnectionQuery): Promise<Connection<ModelInstanceDocument | null>>;
export declare function querySingle(ceramic: CeramicApi, query: BaseQuery): Promise<ModelInstanceDocument | null>;
export declare function areValidRangeValueConditions(a: string, b: string): boolean;
export declare function assertValidAnyValueFilter(filter: Record<string, unknown>): asserts filter is AnyValueFilter;
export declare function assertValidObjectFilter(filter: Record<string, Record<string, unknown>>): asserts filter is ObjectFilter;
export declare function assertValidQueryFilters(filters: Record<string, unknown>): asserts filters is QueryFilters;
export declare function createRelationQueryFilters(relationKey: string, targetID: string, customFilters?: QueryFilters): QueryFilters;
