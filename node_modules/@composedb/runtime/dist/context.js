import { queryConnection, querySingle } from './query.js';
import { DocumentLoader } from './loader.js';
export function createContext(params) {
    const { cache, ceramic, fallbackViewerID } = params;
    const loader = params.loader ?? new DocumentLoader({
        ceramic,
        cache
    });
    function getViewerID() {
        const did = ceramic.did;
        return did ? did.hasParent ? did.parent : did.id : fallbackViewerID ?? null;
    }
    return {
        ceramic,
        loader,
        getViewerID,
        isAuthenticated: ()=>ceramic.did?.authenticated ?? false,
        loadDoc: async (id, fresh = false)=>{
            if (fresh) {
                loader.clear(id);
            }
            return await loader.load(id);
        },
        createDoc: async (model, content)=>{
            return await loader.create(model, content);
        },
        createSingle: async (model, content, options)=>{
            const controller = getViewerID();
            if (controller == null) {
                throw new Error('Document can only be created with an authenticated account');
            }
            const doc = await loader.single(controller, model, options);
            await doc.replace(content);
            return doc;
        },
        updateDoc: async (id, content, options)=>{
            return await loader.update(id, content, options);
        },
        queryConnection: async (query)=>{
            return await queryConnection(ceramic, query);
        },
        queryCount: async (query)=>{
            return await ceramic.index.count(query);
        },
        querySingle: async (query)=>{
            return await querySingle(ceramic, query);
        }
    };
}
