import type { CeramicApi, CreateOpts, UpdateOpts } from '@ceramicnetwork/common';
import { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
import { type CommitID, StreamID } from '@ceramicnetwork/streamid';
import DataLoader from 'dataloader';
export type DocID = CommitID | StreamID | string;
export type CreateOptions = CreateOpts & {
    controller?: string;
};
export type UpdateDocOptions = {
    replace?: boolean;
    version?: string;
};
export type UpdateOptions = UpdateOpts & UpdateDocOptions;
export type DocumentCache = {
    /**
     * Get a Promise of a ModelInstanceDocument by its stream ID
     */
    get(id: string): Promise<ModelInstanceDocument> | void;
    /**
     * Set a Promise of a ModelInstanceDocument by its stream ID
     */
    set(id: string, value: Promise<ModelInstanceDocument>): any;
    /**
     * Remove a specific entry from the cache
     */
    delete(id: string): any;
    /**
     * Remove all entries from the cache
     */
    clear(): any;
};
export type DocumentLoaderParams = {
    /**
     * A Ceramic client instance
     */
    ceramic: CeramicApi;
    /**
     * A supported cache implementation, `true` to use the default implementation or `false` to
     * disable the cache (default)
     */
    cache?: DocumentCache | boolean;
    /**
     * MultiQuery request timeout in milliseconds
     */
    multiqueryTimeout?: number;
};
/** @internal */
export declare function idToString(id: DocID): string;
export declare class DocumentLoader extends DataLoader<DocID, ModelInstanceDocument> {
    #private;
    constructor(params: DocumentLoaderParams);
    /**
     * Add a ModelInstanceDocument to the local cache, if enabled.
     */
    cache(stream: ModelInstanceDocument): boolean;
    /**
     * Create a new ModelInstanceDocument and add it to the cache, if enabled.
     */
    create<T extends Record<string, any> = Record<string, any>>(model: string | StreamID, content: T, { controller, ...options }?: CreateOptions): Promise<ModelInstanceDocument<T>>;
    /**
     * Load a ModelInstanceDocument from the cache (if enabled) or remotely.
     */
    load<T extends Record<string, any> = Record<string, any>>(id: DocID): Promise<ModelInstanceDocument<T>>;
    /**
     * Create or load a deterministic ModelInstanceDocument and cache it.
     */
    single<T extends Record<string, any> = Record<string, any>>(controller: string, model: string | StreamID, options?: CreateOpts): Promise<ModelInstanceDocument<T>>;
    /**
     * Update a ModelInstanceDocument after loading the stream remotely, bypassing the cache.
     */
    update<T extends Record<string, any> = Record<string, any>>(streamID: string | StreamID, content: T, { replace, version, ...options }?: UpdateOptions): Promise<ModelInstanceDocument<T>>;
}
