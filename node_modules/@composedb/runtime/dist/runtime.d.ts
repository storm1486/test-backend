import type { CeramicApi } from '@ceramicnetwork/common';
import { type DocumentNode, type ExecutionResult, type Source } from 'graphql';
import { type Context } from './context.js';
import type { DocumentCache } from './loader.js';
import { type GetSchemaParams } from './utils.js';
export type ComposeRuntimeParams = GetSchemaParams & {
    /**
     * Optional cache for documents.
     */
    cache?: DocumentCache | boolean;
    /**
     * Ceramic client instance or HTTP URL.
     */
    ceramic: CeramicApi | string;
    /**
     * Optional context to use.
     */
    context?: Context;
};
/**
 * The ComposeRuntime class provides APIs to execute queries on a GraphQL schema generated from a
 * `RuntimeCompositeDefinition`. It allows applications to interact with documents using known
 * models on a Ceramic node.
 *
 * It is exported by the {@linkcode runtime} module.
 *
 * ```sh
 * import { ComposeRuntime } from '@composedb/runtime'
 * ```
 */
export declare class ComposeRuntime {
    #private;
    constructor(params: ComposeRuntimeParams);
    /**
     * Context object used internally.
     */
    get context(): Context;
    /**
     * Execute a GraphQL query from a DocumentNode and optional variables.
     */
    execute<Data = Record<string, unknown>>(document: DocumentNode, variableValues?: Record<string, unknown>): Promise<ExecutionResult<Data>>;
    /**
     * Execute a GraphQL query from its source and optional variables.
     */
    executeQuery<Data = Record<string, unknown>>(source: string | Source, variableValues?: Record<string, unknown>): Promise<ExecutionResult<Data>>;
}
