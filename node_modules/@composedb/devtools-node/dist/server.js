import { CeramicClient } from '@ceramicnetwork/http-client';
import { createContext, createGraphQLSchema } from '@composedb/runtime';
import { startGraphQLServer } from '@composedb/server';
import { readEncodedComposite } from './fs.js';
/**
 * Create a local GraphQL server to interact with a runtime composite definition.
 */ export async function serveGraphQL(params) {
    const { ceramicURL, definition, readonly, did, graphiql, port } = params;
    const ceramic = new CeramicClient(ceramicURL);
    if (did != null) {
        ceramic.did = did;
    }
    return await startGraphQLServer({
        ceramic,
        options: {
            context: createContext({
                ceramic
            }),
            graphiql
        },
        port,
        schema: createGraphQLSchema({
            definition,
            readonly
        })
    });
}
/**
 * Create a local GraphQL server to interact with an encoded composite definition.
 */ export async function serveEncodedDefinition(params) {
    const { path, ...rest } = params;
    const composite = await readEncodedComposite(params.ceramicURL, path);
    return await serveGraphQL({
        ...rest,
        definition: composite.toRuntime()
    });
}
