import { CeramicClient } from '@ceramicnetwork/http-client';
import { Composite } from '@composedb/devtools';
import type { RuntimeCompositeDefinition } from '@composedb/types';
import type { PathInput } from './types.js';
/** @internal */
export declare function getFilePath(path: PathInput): string;
/** @internal */
export declare function getDirPath(path: PathInput): string;
/**
 * Create a Composite from a GraphQL schema path.
 */
export declare function createComposite(ceramic: CeramicClient, path: PathInput): Promise<Composite>;
/**
 * Create a Composite from a JSON-encoded definition path.
 */
export declare function readEncodedComposite(ceramic: CeramicClient | string, path: PathInput, index?: boolean): Promise<Composite>;
/**
 * Write a JSON-encoded definition for the given composite to the given file path.
 */
export declare function writeEncodedComposite(composite: Composite, path: PathInput): Promise<string>;
/**
 * Write the runtime GraphQL schema from the runtime composite definition.
 */
export declare function writeGraphQLSchema(definition: RuntimeCompositeDefinition, path: PathInput, readonly?: boolean): Promise<string>;
/**
 * Write the runtime definition for a given path, based on the file extension. Supports `.json`,
 * `.js` and `.ts` extensions.
 */
export declare function writeRuntimeDefinition(definition: RuntimeCompositeDefinition, path: PathInput): Promise<string>;
/**
 * Write the runtime definition based on the encoded definition path.
 */
export declare function writeEncodedCompositeRuntime(ceramic: CeramicClient | string, definitionPath: PathInput, runtimePath: PathInput, schemaPath?: PathInput): Promise<void>;
/**
 * Merge the encoded `source` composite(s) to the `destination` path.
 */
export declare function mergeEncodedComposites(ceramic: CeramicClient | string, source: PathInput | Array<PathInput>, destination: PathInput): Promise<string>;
