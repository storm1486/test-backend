/** @internal */ export function streamIDToString(id) {
    return typeof id === 'string' ? id : id.toString();
}
/** @internal */ export function applyMap(inputs, callFunc) {
    return Object.entries(inputs).reduce((acc, [key, value])=>{
        acc[key] = callFunc(value);
        return acc;
    }, {});
}
/** @internal */ export async function promiseMap(inputs, callFunc) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const results = await Promise.all(Object.values(inputs).map((value)=>callFunc(value)));
    return Object.keys(inputs).reduce((acc, key, i)=>{
        acc[key] = results[i];
        return acc;
    }, {});
}
const RELATION_VIEW_SOURCES = {
    relationDocument: 'document',
    relationFrom: 'queryConnection',
    relationCountFrom: 'queryCount'
};
const RELATION_VIEW_TYPES = Object.keys(RELATION_VIEW_SOURCES);
/** @internal */ export function assertRelationViewDefinition(view) {
    if (!RELATION_VIEW_TYPES.includes(view.type)) {
        throw new Error(`Invalid relation view: ${view.type}`);
    }
    return view;
}
/** @internal */ export function viewDefinitionToRuntimeRelation(view) {
    const relation = assertRelationViewDefinition(view);
    return {
        source: RELATION_VIEW_SOURCES[relation.type],
        model: relation.model,
        property: relation.property
    };
}
/** @internal */ export function viewDefinitionToRuntime(view) {
    switch(view.type){
        case 'documentAccount':
        case 'documentVersion':
            return {
                type: 'view',
                viewType: view.type
            };
        case 'relationCountFrom':
        case 'relationDocument':
        case 'relationFrom':
            return {
                type: 'view',
                viewType: 'relation',
                relation: viewDefinitionToRuntimeRelation(view)
            };
        default:
            // @ts-ignore unexpected view type
            throw new Error(`Unsupported view type: ${view.type}`);
    }
}
/** @internal */ export function viewRuntimeToModel(field) {
    if (field.viewType === 'relation') {
        const { model, property, source } = field.relation;
        if (source === 'document') {
            return {
                type: 'relationDocument',
                model,
                property
            };
        }
        if (model == null) {
            throw new Error(`Missing model for ${source} relation view`);
        }
        switch(source){
            case 'queryConnection':
                return {
                    type: 'relationFrom',
                    model,
                    property
                };
            case 'queryCount':
                return {
                    type: 'relationCountFrom',
                    model,
                    property
                };
        }
    }
    return {
        type: field.viewType
    };
}
