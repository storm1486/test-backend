function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
import { CeramicClient } from '@ceramicnetwork/http-client';
import { ComposeRuntime, createContext } from '@composedb/runtime';
import { createHybridSchema } from './remote.js';
var _context = /*#__PURE__*/ new WeakMap(), _resources = /*#__PURE__*/ new WeakMap(), _runtime = /*#__PURE__*/ new WeakMap();
/**
 * The ComposeClient class provides APIs to execute queries on a GraphQL schema generated from a
 * `RuntimeCompositeDefinition`, leveraging the {@linkcode runtime.ComposeRuntime ComposeRuntime class}.
 *
 * It is exported by the {@linkcode client} module.
 *
 * ```sh
 * import { ComposeClient } from '@composedb/client'
 * ```
 */ export class ComposeClient {
    /**
   * Context instance used internally.
   */ get context() {
        return _class_private_field_get(this, _context);
    }
    /**
   * DID instance used internally by the Ceramic client instance.
   */ get did() {
        return _class_private_field_get(this, _context).ceramic.did;
    }
    /**
   * ID of the DID attached to the Ceramic client instance used internally. If `null`, the
   * Ceramic instance is not authenticated and mutations will fail.
   */ get id() {
        return _class_private_field_get(this, _context).getViewerID();
    }
    /**
   * CACAO resources URLs for the models the client interacts with.
   */ get resources() {
        return _class_private_field_get(this, _resources);
    }
    /**
   * Attach the given DID instance to the Ceramic client instance used internally. An authenticated
   * DID instance is necessary to perform GraphQL mutations.
   */ setDID(did) {
        _class_private_field_get(this, _context).ceramic.did = did;
    }
    /**
   * Execute a GraphQL query from a DocumentNode and optional variables.
   */ async execute(document, variableValues) {
        return await _class_private_field_get(this, _runtime).execute(document, variableValues);
    }
    /**
   * Execute a GraphQL query from its source and optional variables.
   */ async executeQuery(source, variableValues) {
        return await _class_private_field_get(this, _runtime).executeQuery(source, variableValues);
    }
    constructor(params){
        _class_private_field_init(this, _context, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _resources, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _runtime, {
            writable: true,
            value: void 0
        });
        const { ceramic, definition, remoteExecutor, serverURL, ...contextParams } = params;
        const ceramicClient = typeof ceramic === 'string' ? new CeramicClient(ceramic) : ceramic;
        _class_private_field_set(this, _context, createContext({
            ...contextParams,
            ceramic: ceramicClient
        }));
        _class_private_field_set(this, _resources, Object.values(definition.models).map((model)=>{
            return `ceramic://*?model=${model.id}`;
        }));
        const runtimeParams = {
            ceramic: ceramicClient,
            context: _class_private_field_get(this, _context),
            definition
        };
        if (remoteExecutor != null || serverURL != null) {
            runtimeParams.schema = createHybridSchema({
                definition,
                getViewerID: ()=>this.id,
                remoteExecutor,
                serverURL
            });
        }
        _class_private_field_set(this, _runtime, new ComposeRuntime(runtimeParams));
    }
}
