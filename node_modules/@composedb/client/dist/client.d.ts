import type { CeramicApi } from '@ceramicnetwork/common';
import { type Context, type DocumentCache } from '@composedb/runtime';
import type { RuntimeCompositeDefinition } from '@composedb/types';
import type { Executor } from '@graphql-tools/utils';
import type { DID } from 'dids';
import type { DocumentNode, ExecutionResult, Source } from 'graphql';
export type ComposeClientParams = {
    /**
     * Optional cache for documents.
     */
    cache?: DocumentCache;
    /**
     * Ceramic client instance or HTTP URL.
     */
    ceramic: CeramicApi | string;
    /**
     * Runtime composite definition, created using the {@linkcode devtools.Composite Composite}
     * development tools.
     */
    definition: RuntimeCompositeDefinition;
    /**
     * Optional remote query executor.
     */
    remoteExecutor?: Executor;
    /**
     * Optional {@linkcode server query server} URL.
     */
    serverURL?: string;
};
/**
 * The ComposeClient class provides APIs to execute queries on a GraphQL schema generated from a
 * `RuntimeCompositeDefinition`, leveraging the {@linkcode runtime.ComposeRuntime ComposeRuntime class}.
 *
 * It is exported by the {@linkcode client} module.
 *
 * ```sh
 * import { ComposeClient } from '@composedb/client'
 * ```
 */
export declare class ComposeClient {
    #private;
    constructor(params: ComposeClientParams);
    /**
     * Context instance used internally.
     */
    get context(): Context;
    /**
     * DID instance used internally by the Ceramic client instance.
     */
    get did(): DID | undefined;
    /**
     * ID of the DID attached to the Ceramic client instance used internally. If `null`, the
     * Ceramic instance is not authenticated and mutations will fail.
     */
    get id(): string | null;
    /**
     * CACAO resources URLs for the models the client interacts with.
     */
    get resources(): Array<string>;
    /**
     * Attach the given DID instance to the Ceramic client instance used internally. An authenticated
     * DID instance is necessary to perform GraphQL mutations.
     */
    setDID(did: DID): void;
    /**
     * Execute a GraphQL query from a DocumentNode and optional variables.
     */
    execute<Data = Record<string, unknown>>(document: DocumentNode, variableValues?: Record<string, unknown>): Promise<ExecutionResult<Data>>;
    /**
     * Execute a GraphQL query from its source and optional variables.
     */
    executeQuery<Data = Record<string, unknown>>(source: string | Source, variableValues?: Record<string, unknown>): Promise<ExecutionResult<Data>>;
}
