export interface Left<TError> {
    readonly _tag: "Left";
    readonly left: TError;
}
export interface Right<TValue> {
    readonly _tag: "Right";
    readonly right: TValue;
}
export type Either<TError, TValue> = Left<TError> | Right<TValue>;
export declare function isLeft<TError>(either: Either<TError, unknown>): either is Left<TError>;
/**
 * Human-friendly alias for `isLeft`.
 */
export declare const isError: typeof isLeft;
export declare function isRight<TValue>(either: Either<unknown, TValue>): either is Right<TValue>;
/**
 * Human-friendly alias for `isRight`.
 */
export declare const isValid: typeof isRight;
export declare function left<TError = never, TValue = never>(e: TError): Either<TError, TValue>;
export declare function right<TError = never, TValue = never>(a: TValue): Either<TError, TValue>;
export type Maybe<T> = Either<Error, T>;
export declare function getOrThrow<TError = never, TValue = never>(maybe: Maybe<TValue>): TValue;
