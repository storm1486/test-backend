import type { NonEmptyArray } from "ts-essentials";
import type { Trail, Validation, Errors, Context, Decoder } from "./struct.js";
import { ValidationError } from "./struct.js";
export declare class LazyContext implements Context {
    readonly trail: Trail;
    constructor(trail: Trail);
    static root<TInput, TValue>(codec: Decoder<TInput, TValue>, input: TInput): LazyContext;
    failures<TValue>(errors: Errors): Validation<TValue>;
    success<TValue>(value: TValue): Validation<TValue>;
    failure<TValue>(message?: string): Validation<TValue>;
    child<TCodec extends Decoder<any, any>>(key: string, codec: TCodec, input: unknown): Context;
}
export declare class ThrowContext implements Context {
    readonly trail: Trail;
    constructor(trail: Trail);
    static root<TInput, TValue>(codec: Decoder<TInput, TValue>, input: TInput): ThrowContext;
    failures<TValue>(errors: NonEmptyArray<ValidationError>): never;
    success<TValue>(value: TValue): Validation<TValue>;
    failure<TValue>(message?: string): never;
    child<TCodec extends Decoder<any, any>>(key: string, codec: TCodec, input: unknown): Context;
}
export declare function validate<TInput, TValue>(codec: Decoder<TInput, TValue>, input: TInput): Validation<TValue>;
export declare function report<TValue>(validation: Validation<TValue>): Array<string>;
export declare function decode<TInput, TValue>(codec: Decoder<TInput, TValue>, input: TInput): TValue;
