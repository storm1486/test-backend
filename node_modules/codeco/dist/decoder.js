import { isLeft, left, right } from "./either.js";
import { ValidationError } from "./struct.js";
export class LazyContext {
    trail;
    constructor(trail) {
        this.trail = trail;
    }
    static root(codec, input) {
        return new LazyContext([{ key: "", type: codec, actual: input }]);
    }
    failures(errors) {
        return left(errors);
    }
    success(value) {
        return right(value);
    }
    failure(message) {
        return left([new ValidationError(this.trail, message)]);
    }
    child(key, codec, input) {
        const nextTrail = this.trail.concat([{ key: key, type: codec, actual: input }]);
        return new LazyContext(nextTrail);
    }
}
export class ThrowContext {
    trail;
    constructor(trail) {
        this.trail = trail;
    }
    static root(codec, input) {
        return new ThrowContext([{ key: "", type: codec, actual: input }]);
    }
    failures(errors) {
        throw errors[0];
    }
    success(value) {
        return right(value);
    }
    failure(message) {
        throw new ValidationError(this.trail, message);
    }
    child(key, codec, input) {
        const nextTrail = this.trail.concat([{ key: key, type: codec, actual: input }]);
        return new ThrowContext(nextTrail);
    }
}
export function validate(codec, input) {
    const context = LazyContext.root(codec, input);
    return codec.decode(input, context);
}
export function report(validation) {
    if (isLeft(validation)) {
        return validation.left.map((error) => error.message);
    }
    else {
        return [];
    }
}
export function decode(codec, input) {
    const context = ThrowContext.root(codec, input);
    const decodeResult = codec.decode(input, context);
    if (isLeft(decodeResult))
        throw new Error(`Something is wrong: ${decodeResult} should be Right`);
    return decodeResult.right;
}
