import { fetchJson } from '@ceramicnetwork/common';
import { MissingDIDError } from './utils.js';
export class RemotePinApi {
    constructor(_apiUrl, _getDidFn) {
        this._apiUrl = _apiUrl;
        this._getDidFn = _getDidFn;
        this._fetchJson = fetchJson;
        this.getCodePath = './admin/getCode';
    }
    async buildJWS(actingDid, code, url) {
        if (!actingDid)
            throw new MissingDIDError();
        const jws = await actingDid.createJWS({
            code: code,
            requestPath: url.pathname,
        });
        return `${jws.signatures[0].protected}.${jws.payload}.${jws.signatures[0].signature}`;
    }
    getCodeUrl() {
        return new URL(this.getCodePath, this._apiUrl);
    }
    getBaseUrl() {
        return new URL(`./admin/pins`, this._apiUrl);
    }
    async generateCode() {
        return (await this._fetchJson(this.getCodeUrl())).code;
    }
    async add(streamId, force) {
        const args = {};
        if (force) {
            args.force = true;
        }
        const code = await this.generateCode();
        const url = new URL(`./admin/pins/${streamId}`, this._apiUrl);
        await this._fetchJson(url, {
            headers: {
                Authorization: `Basic ${await this.buildJWS(this._getDidFn(), code, this.getBaseUrl())}`,
            },
            method: 'POST',
            body: args,
        });
    }
    async rm(streamId, opts) {
        const code = await this.generateCode();
        const url = new URL(`./admin/pins/${streamId}`, this._apiUrl);
        await this._fetchJson(url, {
            headers: {
                Authorization: `Basic ${await this.buildJWS(this._getDidFn(), code, this.getBaseUrl())}`,
            },
            method: 'DELETE',
            body: { opts },
        });
    }
    async ls(streamId) {
        let url = new URL('./admin/pins', this._apiUrl);
        if (streamId) {
            url = new URL(`./admin/pins/${streamId.toString()}`, this._apiUrl);
        }
        const code = await this.generateCode();
        const result = await this._fetchJson(url, {
            headers: {
                Authorization: `Basic ${await this.buildJWS(this._getDidFn(), code, this.getBaseUrl())}`,
            },
        });
        const { pinnedStreamIds } = result;
        return {
            [Symbol.asyncIterator]() {
                let index = 0;
                return {
                    next() {
                        if (index === pinnedStreamIds.length) {
                            return Promise.resolve({ value: null, done: true });
                        }
                        return Promise.resolve({ value: pinnedStreamIds[index++], done: false });
                    },
                };
            },
        };
    }
}
//# sourceMappingURL=remote-pin-api.js.map