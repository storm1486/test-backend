import { StreamID } from '@ceramicnetwork/streamid';
export function typeStreamID(streamId) {
    return typeof streamId === 'string' ? StreamID.fromString(streamId) : streamId;
}
export function serializeObjectToSearchParams(queryURL, queryObject) {
    const resultURL = new URL(queryURL);
    for (const [key, value] of Object.entries(queryObject)) {
        if (StreamID.isInstance(value)) {
            resultURL.searchParams.set(key, value.toString());
        }
        else if (typeof value == 'object') {
            resultURL.searchParams.set(key, JSON.stringify(value));
        }
        else {
            resultURL.searchParams.set(key, value);
        }
    }
    return resultURL;
}
export function serializeObjectForHttpPost(query) {
    const result = {};
    for (const [key, value] of Object.entries(query)) {
        if (StreamID.isInstance(value)) {
            result[key] = value.toString();
        }
        else {
            result[key] = value;
        }
    }
    return result;
}
export class MissingDIDError extends Error {
    constructor() {
        super('Failed to get DID.  Please make sure your Ceramic client has an authenticated DID attached');
    }
}
//# sourceMappingURL=utils.js.map