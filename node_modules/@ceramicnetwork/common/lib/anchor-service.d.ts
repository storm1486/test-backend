import type { CID } from 'multiformats/cid';
import type { StreamID } from '@ceramicnetwork/streamid';
import type { CAR } from 'cartonne';
import type { NotCompleteStatusName } from '@ceramicnetwork/codecs';
import { AnchorRequestStatusName } from '@ceramicnetwork/codecs';
export declare enum AnchorStatus {
    NOT_REQUESTED = 0,
    PENDING = 1,
    PROCESSING = 2,
    ANCHORED = 3,
    FAILED = 4,
    REPLACED = 5
}
export declare enum AnchorServiceAuthMethods {
    DID = "did"
}
export declare type AnchorProof = {
    chainId: string;
    txHash: CID;
    root: CID;
    txType?: string;
};
export declare type NotCompleteAnchorEvent = {
    status: NotCompleteStatusName;
    message: string;
    streamId: StreamID;
    cid: CID;
};
export declare type CompleteAnchorEvent = {
    status: AnchorRequestStatusName.COMPLETED;
    message: string;
    streamId: StreamID;
    cid: CID;
    witnessCar: CAR;
};
export declare type AnchorEvent = NotCompleteAnchorEvent | CompleteAnchorEvent;
//# sourceMappingURL=anchor-service.d.ts.map