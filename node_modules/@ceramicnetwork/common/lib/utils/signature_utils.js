import { getEIP191Verifier } from '@didtools/pkh-ethereum';
import { getSolanaVerifier } from '@didtools/pkh-solana';
import { getStacksVerifier } from '@didtools/pkh-stacks';
import { getTezosVerifier } from '@didtools/pkh-tezos';
const DEFAULT_CACAO_REVOCATION_PHASE_OUT = 24 * 60 * 60;
const verifiersCACAO = {
    ...getEIP191Verifier(),
    ...getSolanaVerifier(),
    ...getStacksVerifier(),
    ...getTezosVerifier(),
};
export class SignatureUtils {
    static async verifyCommitSignature(commitData, did, controller, model, streamId) {
        try {
            const cacao = await this._verifyCapabilityAuthz(commitData, streamId, model);
            const atTime = commitData.timestamp ? new Date(commitData.timestamp * 1000) : undefined;
            await did.verifyJWS(commitData.envelope, {
                atTime: atTime,
                issuer: controller,
                capability: cacao,
                revocationPhaseOutSecs: DEFAULT_CACAO_REVOCATION_PHASE_OUT,
                verifiers: verifiersCACAO,
            });
        }
        catch (e) {
            const original = e.message ? e.message : String(e);
            throw new Error(`Can not verify signature for commit ${commitData.cid} to stream ${streamId} which has controller DID ${controller}: ${original}`);
        }
    }
    static async _verifyCapabilityAuthz(commitData, streamId, model) {
        const cacao = commitData.capability;
        if (!cacao)
            return null;
        const resources = cacao.p.resources;
        const payloadCID = commitData.envelope.link.toString();
        if (!resources.includes(`ceramic://*`) &&
            !resources.includes(`ceramic://${streamId.toString()}`) &&
            !resources.includes(`ceramic://${streamId.toString()}?payload=${payloadCID}`) &&
            !(model && resources.includes(`ceramic://*?model=${model.toString()}`))) {
            throw new Error(`Capability does not have appropriate permissions to update this Stream`);
        }
        return cacao;
    }
}
//# sourceMappingURL=signature_utils.js.map