export interface MergeFunction<TValue, TMetadata> {
    merge(n1: Node<TValue>, n2: Node<TValue> | null, metadata: TMetadata | null): Promise<Node<TValue>>;
}
export interface CompareFunction<TValue> {
    compare(n1: Node<TValue>, n2: Node<TValue>): number;
}
export interface MetadataFunction<TValue, TMetadata> {
    generateMetadata(leafNodes: Array<Node<TValue>>): TMetadata;
}
export declare class Node<TValue> {
    readonly data: TValue;
    readonly left: Node<TValue> | null;
    readonly right: Node<TValue> | null;
    parent?: Node<TValue>;
    constructor(data: TValue, left?: Node<TValue> | null, right?: Node<TValue> | null);
    toString(): string;
}
export declare enum PathDirection {
    L = 0,
    R = 1
}
export declare function pathString(path: Array<PathDirection>): string;
export interface BloomMetadata {
    type: string;
    data: any;
}
export interface TreeMetadata {
    numEntries: number;
    bloomFilter: BloomMetadata;
    streamIds: string[];
}
//# sourceMappingURL=merkle-elements.d.ts.map