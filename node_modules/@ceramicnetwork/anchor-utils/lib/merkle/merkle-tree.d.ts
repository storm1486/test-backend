import { Node, PathDirection, type MergeFunction } from './merkle-elements.js';
export interface IMerkleTree<TData, TLeaf extends TData, TMetadata> {
    readonly root: Node<TData>;
    readonly leafNodes: Array<Node<TLeaf>>;
    readonly metadata: TMetadata | null;
    getProof(elemIndex: number): Array<Node<TData>>;
    getDirectPathFromRoot(elemIndex: number): PathDirection[];
    verifyProof(proof: Node<TData>[], element: TData): Promise<boolean>;
}
export declare class MerkleTree<TData, TLeaf extends TData, TMetadata> implements IMerkleTree<TData, TLeaf, TMetadata> {
    private readonly mergeFn;
    readonly root: Node<TData>;
    readonly leafNodes: Array<Node<TLeaf>>;
    readonly metadata: TMetadata | null;
    constructor(mergeFn: MergeFunction<TData, TMetadata>, root: Node<TData>, leafNodes: Array<Node<TLeaf>>, metadata: TMetadata | null);
    getProof(elemIndex: number): Array<Node<TData>>;
    getDirectPathFromRoot(elemIndex: number): PathDirection[];
    verifyProof(proof: Node<TData>[], element: TData): Promise<boolean>;
}
export declare function pathByIndex(index: number, leavesCount: number): PathDirection[];
//# sourceMappingURL=merkle-tree.d.ts.map