import type { CompareFunction, MergeFunction, MetadataFunction } from './merkle-elements.js';
import { MerkleTree, type IMerkleTree } from './merkle-tree.js';
export declare class EmptyLeavesError extends Error {
    constructor();
}
export declare class MerkleDepthError extends Error {
    constructor(depthLimit: number, leavesLimit: number);
}
export interface IMerkleTreeFactory<TData, TLeaf extends TData, TMetadata, TMerkleTree extends IMerkleTree<TData, TLeaf, TMetadata>> {
    build(leaves: Array<TLeaf> | null | undefined): Promise<TMerkleTree>;
}
export declare class MerkleTreeFactory<TData, TLeaf extends TData, TMetadata> implements IMerkleTreeFactory<TData, TLeaf, TMetadata, MerkleTree<TData, TLeaf, TMetadata>> {
    private readonly mergeFn;
    private readonly compareFn?;
    private readonly metadataFn?;
    private readonly depthLimit?;
    constructor(mergeFn: MergeFunction<TData, TMetadata>, compareFn?: CompareFunction<TLeaf> | undefined, metadataFn?: MetadataFunction<TLeaf, TMetadata> | undefined, depthLimit?: number | undefined);
    build(leaves: Array<TLeaf> | null | undefined): Promise<MerkleTree<TData, TLeaf, TMetadata>>;
    private buildLevel;
}
//# sourceMappingURL=merkle-tree-factory.d.ts.map