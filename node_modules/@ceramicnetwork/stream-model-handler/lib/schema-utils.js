import ajv from 'ajv/dist/2020.js';
function recursiveMap(schema, fn) {
    fn(schema);
    Object.getOwnPropertyNames(schema).forEach((schemaPropertyName) => {
        if (schema[schemaPropertyName] !== null && typeof schema[schemaPropertyName] == 'object') {
            recursiveMap(schema[schemaPropertyName], fn);
        }
    });
}
function isObjectJSONSchema(schema) {
    return schema && schema.type === 'object';
}
function validateAdditionalProperties(schema) {
    if (isObjectJSONSchema(schema)) {
        if (schema.additionalProperties !== false) {
            throw new Error('All objects in schema need to have additional properties disabled');
        }
    }
}
export class SchemaValidation {
    constructor() {
        this.STANDARD_VERSION = '2020-12';
        this._validator = new ajv({
            strict: true,
            allErrors: true,
            allowMatchingProperties: false,
            ownProperties: false,
            unevaluated: false,
        });
    }
    async validateSchema(schema) {
        if (!schema)
            throw new Error(`Validation Error: schema must be defined`);
        const isValid = await this._validator.validateSchema(schema);
        this._validator.removeSchema(schema);
        if (!isValid) {
            const errorMessages = this._validator.errorsText();
            throw new Error(`Validation Error: ${errorMessages}`);
        }
        recursiveMap(schema, validateAdditionalProperties);
    }
}
//# sourceMappingURL=schema-utils.js.map