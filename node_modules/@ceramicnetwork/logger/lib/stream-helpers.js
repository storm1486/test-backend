import { createStream as createRfsStream } from 'rotating-file-stream';
export class SafeStreamHandler {
    constructor(stream, name) {
        this.ready = true;
        this.stream = stream;
        this.name = name;
    }
    write(message) {
        this.writeStream(message);
    }
    end(...args) {
        this.stream.end(...args);
    }
    writeStream(message) {
        if (!this.ready) {
            console.warn(`Stream busy: ${this.name}. Write will be dropped: "${message}"`);
            return;
        }
        this.ready = false;
        this.stream.on('error', (err) => {
            throw err;
        });
        this.stream.on('drain', () => {
            this.ready = true;
            return;
        });
        this.stream.on('finish', () => {
            this.ready = true;
            return;
        });
        this.ready = this.stream.write(message, () => {
            return;
        });
    }
}
export class RotatingFileStream {
    constructor(filePath, writeImmediately, options) {
        this.filePath = filePath;
        this.immediate = writeImmediately;
        this.options = options;
        if (!this.immediate) {
            this.stream = createRfsStream(this.filePath, options);
        }
    }
    write(message) {
        let fileStream = this.stream;
        if (this.immediate) {
            fileStream = createRfsStream(this.filePath, this.options);
        }
        const stream = new SafeStreamHandler(fileStream, this.filePath);
        stream.write(message);
        if (this.immediate) {
            stream.end();
        }
    }
    end() {
        if (this.stream !== undefined) {
            this.stream.end();
        }
    }
}
//# sourceMappingURL=stream-helpers.js.map