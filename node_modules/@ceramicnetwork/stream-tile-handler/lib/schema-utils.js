import { CommitID } from '@ceramicnetwork/streamid';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import { LRUCache } from 'least-recent';
function buildAjv() {
    const validator = new Ajv({ allErrors: true, strictTypes: false, strictTuples: false });
    addFormats(validator);
    return validator;
}
const AJV_CACHE_SIZE = 500;
export class SchemaValidation {
    constructor() {
        this.validators = new LRUCache(AJV_CACHE_SIZE);
    }
    async validateSchema(ceramic, content, schemaStreamId) {
        const schema = await this._loadSchemaById(ceramic, schemaStreamId);
        this._validate(content, schema, schemaStreamId);
    }
    async _loadSchemaById(ceramic, schemaStreamId) {
        let commitId;
        try {
            commitId = CommitID.fromString(schemaStreamId);
        }
        catch {
            throw new Error('Commit missing when loading schema document');
        }
        const stream = await ceramic.loadStream(commitId);
        return stream.content;
    }
    _validate(content, schema, schemaStreamId) {
        let validator = this.validators.get(schemaStreamId);
        if (!validator) {
            validator = buildAjv();
            this.validators.set(schemaStreamId, validator);
        }
        const isValid = validator.validate(schema, content);
        if (!isValid) {
            const errorMessages = validator.errorsText();
            throw new Error(`Validation Error: ${errorMessages}`);
        }
    }
}
//# sourceMappingURL=schema-utils.js.map