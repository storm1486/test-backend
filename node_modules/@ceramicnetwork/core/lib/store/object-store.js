export class ObjectStore {
    constructor(generateKey, serialize, deserialize) {
        this.generateKey = generateKey;
        this.serialize = serialize;
        this.deserialize = deserialize;
    }
    throwIfNotOpened() {
        if (!this.store)
            throw Error(`${this.constructor.name} is closed, you need to call async open(...), before performing other operations`);
    }
    async open(store) {
        this.store = store;
    }
    async close() {
        if (!this.store)
            return;
        await this.store.close(this.useCaseName);
        this.store = undefined;
    }
    async save(object, value) {
        this.throwIfNotOpened();
        await this.store.put(this.generateKey(object), this.serialize(value), this.useCaseName);
    }
    async load(object) {
        this.throwIfNotOpened();
        try {
            const serialized = await this.store.get(this.generateKey(object), this.useCaseName);
            if (serialized) {
                return this.deserialize(serialized);
            }
            else {
                return null;
            }
        }
        catch (err) {
            if (err.notFound) {
                return null;
            }
            throw err;
        }
    }
    async remove(object) {
        this.throwIfNotOpened();
        await this.store.del(this.generateKey(object), this.useCaseName);
    }
}
//# sourceMappingURL=object-store.js.map