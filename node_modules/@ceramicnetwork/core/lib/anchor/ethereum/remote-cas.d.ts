import type { CASClient } from '../anchor-service.js';
import type { AnchorEvent, DiagnosticsLogger, FetchRequest } from '@ceramicnetwork/common';
import type { AnchorRequestCarFileReader } from '../anchor-request-car-file-reader.js';
import type { StreamID } from '@ceramicnetwork/streamid';
import type { CID } from 'multiformats/cid';
import { type Observable } from 'rxjs';
export declare class RemoteCAS implements CASClient {
    #private;
    constructor(anchorServiceUrl: string, logger: DiagnosticsLogger, pollInterval: number, maxPollTime: number, sendRequest: FetchRequest);
    supportedChains(): Promise<Array<string>>;
    create(carFileReader: AnchorRequestCarFileReader, waitForConfirmation: boolean): Promise<AnchorEvent>;
    create$(carFileReader: AnchorRequestCarFileReader, shouldRetry: boolean): Observable<unknown>;
    get(streamId: StreamID, tip: CID): Promise<AnchorEvent>;
    close(): Promise<void>;
}
//# sourceMappingURL=remote-cas.d.ts.map