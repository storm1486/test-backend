import { CARFactory } from 'cartonne';
import * as DAG_JOSE from 'dag-jose';
import { StreamUtils } from '@ceramicnetwork/common';
const CAR_FACTORY = new CARFactory();
CAR_FACTORY.codecs.add(DAG_JOSE);
export class AnchorRequestCarBuilder {
    constructor(dispatcher) {
        this.dispatcher = dispatcher;
    }
    async build(streamId, tip) {
        const car = CAR_FACTORY.build();
        const timestampISO = new Date().toISOString();
        car.put({
            timestamp: timestampISO,
            streamId: streamId.bytes,
            tip: tip,
        }, { isRoot: true });
        const genesisCid = streamId.cid;
        car.blocks.put(await this.dispatcher.getIpfsBlock(genesisCid));
        car.blocks.put(await this.dispatcher.getIpfsBlock(tip));
        const genesisCommit = car.get(genesisCid);
        if (StreamUtils.isSignedCommit(genesisCommit)) {
            car.blocks.put(await this.dispatcher.getIpfsBlock(genesisCommit.link));
        }
        const tipCommit = car.get(tip);
        if (StreamUtils.isSignedCommit(tipCommit)) {
            car.blocks.put(await this.dispatcher.getIpfsBlock(tipCommit.link));
            const tipCacaoCid = StreamUtils.getCacaoCidFromCommit(tipCommit);
            if (tipCacaoCid) {
                car.blocks.put(await this.dispatcher.getIpfsBlock(tipCacaoCid));
            }
        }
        return car;
    }
}
//# sourceMappingURL=anchor-request-car-builder.js.map