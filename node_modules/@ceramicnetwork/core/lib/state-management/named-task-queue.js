import { noop, TaskQueue } from '../ancillary/task-queue.js';
export class NamedTaskQueue {
    constructor(onError = noop, lanes = new Map()) {
        this.onError = onError;
        this.lanes = lanes;
    }
    queue(name) {
        const found = this.lanes.get(name);
        if (found) {
            return found;
        }
        else {
            const queue = new TaskQueue(1, this.onError.bind(this));
            this.lanes.set(name, queue);
            return queue;
        }
    }
    remove(name) {
        const found = this.lanes.get(name);
        if (found && found.size === 0) {
            this.lanes.delete(name);
        }
    }
    run(name, task) {
        const queue = this.queue(name);
        return queue.run(task).finally(() => {
            this.remove(name);
        });
    }
    add(name, task) {
        const queue = this.queue(name);
        queue.add(() => task(), () => this.remove(name));
    }
    async onIdle() {
        const lanes = Array.from(this.lanes.values());
        await Promise.all(lanes.map((lane) => lane.onIdle()));
    }
    async close() {
        await this.onIdle();
        this.pause();
    }
    pause() {
        const lanes = Array.from(this.lanes.values());
        lanes.map((l) => l.pause());
    }
}
//# sourceMappingURL=named-task-queue.js.map