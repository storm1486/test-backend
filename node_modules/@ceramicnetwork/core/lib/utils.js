var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import { Memoize } from 'mapmoize';
import { CommitType, StreamUtils } from '@ceramicnetwork/common';
export class Utils {
    static get validator() {
        const ajv = new Ajv({ allErrors: true, strictTypes: false, strictTuples: false });
        addFormats(ajv);
        return ajv;
    }
    static async awaitCondition(conditionFn, stopFunction, awaitInterval) {
        while (conditionFn()) {
            if (stopFunction()) {
                return;
            }
            await new Promise((resolve) => setTimeout(resolve, awaitInterval));
        }
    }
    static validate(content, schema) {
        const isValid = Utils.validator.validate(schema, content);
        if (!isValid) {
            const errorMessages = Utils.validator.errorsText();
            throw new Error(`Validation Error: ${errorMessages}`);
        }
    }
    static async validateSchema(doc) {
        const schemaStreamId = doc.state?.metadata?.schema;
        if (schemaStreamId) {
            const schemaDoc = await doc.api.loadStream(schemaStreamId);
            if (!schemaDoc) {
                throw new Error(`Schema not found for ${schemaStreamId}`);
            }
            Utils.validate(doc.content, schemaDoc.content);
        }
    }
    static async getCommitData(dispatcher, cid, streamId, timestamp) {
        const commit = await dispatcher.retrieveCommit(cid, streamId);
        if (!commit)
            throw new Error(`No commit found for CID ${cid.toString()}`);
        const commitData = { cid, type: CommitType.SIGNED, commit, timestamp };
        if (StreamUtils.isSignedCommit(commit)) {
            const linkedCommit = await dispatcher.retrieveCommit(commit.link, streamId);
            if (!linkedCommit)
                throw new Error(`No commit found for CID ${commit.link.toString()}`);
            commitData.commit = linkedCommit;
            commitData.envelope = commit;
            commitData.capability = await this.extractCapability(commit, dispatcher);
        }
        else if (StreamUtils.isAnchorCommit(commit)) {
            commitData.type = CommitType.ANCHOR;
            commitData.proof = await dispatcher.retrieveFromIPFS(commit.proof);
        }
        if (!commitData.commit.prev)
            commitData.type = CommitType.GENESIS;
        return commitData;
    }
    static async extractCapability(commit, dispatcher) {
        if (!commit.signatures || commit.signatures.length === 0)
            return;
        const capCID = StreamUtils.getCacaoCidFromCommit(commit);
        if (!capCID)
            return;
        try {
            const cacao = await dispatcher.retrieveFromIPFS(capCID);
            return cacao;
        }
        catch (error) {
            throw new Error(`Error while loading capability from IPFS with CID ${capCID.toString()}: ${error}`);
        }
    }
}
__decorate([
    Memoize(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], Utils, "validator", null);
export class TrieNode {
    constructor(key = '') {
        this.key = key;
        this.children = {};
    }
}
export class PathTrie {
    constructor() {
        this.root = new TrieNode();
    }
    add(path) {
        const nextNodeAdd = (node, key) => {
            if (!node.children[key])
                node.children[key] = new TrieNode(key);
            return node.children[key];
        };
        if (path.startsWith('/'))
            path = path.substring(1);
        path.split('/').reduce(nextNodeAdd, this.root);
    }
}
export const promiseTimeout = (promise, ms, timeoutErrorMsg) => {
    const timeout = new Promise((resolve, reject) => {
        setTimeout(() => reject(new Error(timeoutErrorMsg)), ms);
    });
    return Promise.race([timeout, promise]);
};
//# sourceMappingURL=utils.js.map