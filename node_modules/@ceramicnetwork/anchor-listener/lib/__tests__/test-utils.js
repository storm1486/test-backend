import { defaultAbiCoder } from '@ethersproject/abi';
import { CID } from 'multiformats/cid';
import { decode } from 'multiformats/hashes/digest';
import { toString } from 'uint8arrays';
import { createAnchorProof } from '../utils.js';
export async function delay(time) {
    await new Promise((resolve) => setTimeout(resolve, time));
}
export const bytes32 = new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7,
]);
export const transactionHashCid = CID.parse('bagjqcgza7mvdlzewbfbq35peso2atjydg3ekalew5vmze7w2a5cbhmav4rmq');
export function createLog(blockNumber, bytes = bytes32, txHash = transactionHashCid) {
    return {
        blockNumber,
        blockHash: blockNumber.toString(),
        data: defaultAbiCoder.encode(['bytes32'], [bytes]),
        transactionHash: '0x' + toString(decode(txHash.multihash.bytes).digest, 'base16'),
    };
}
export const mockedLogs = [0, 1, 2].map((i) => createLog(i, new Uint8Array(new Array(32).fill(i))));
export const mockedBlockProofs = mockedLogs.map((log) => ({
    blockNumber: log.blockNumber,
    blockHash: log.blockHash,
    proofs: [createAnchorProof('eip155:1337', log)],
}));
//# sourceMappingURL=test-utils.js.map