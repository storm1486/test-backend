import { type SupportedNetwork } from '@ceramicnetwork/anchor-utils';
import type { AnchorProof } from '@ceramicnetwork/common';
import type { Block, BlockTag, Provider } from '@ethersproject/providers';
import { type Observable, type OperatorFunction, type RetryConfig } from 'rxjs';
export declare type BlockProofs = {
    blockNumber: number;
    blockHash: string;
    proofs: Array<AnchorProof>;
};
export declare type BlockRangeFilter = {
    fromBlock: BlockTag;
    toBlock: BlockTag;
};
export declare type BlockAndBlockProofs = {
    block: Block;
    proofs: BlockProofs;
};
export declare function createBlockLoader(provider: Provider, block: BlockTag, retryConfig?: RetryConfig): Observable<Block>;
export declare function loadBlock(provider: Provider, block: BlockTag, retryConfig?: RetryConfig): Promise<Block>;
export declare function mapLoadBlockForBlockProofs(provider: Provider, retryConfig?: RetryConfig): OperatorFunction<Array<BlockProofs>, BlockAndBlockProofs>;
export declare function createBlockProofsLoaderForRange(provider: Provider, chainId: SupportedNetwork, blockRangeFilter: BlockRangeFilter, retryConfig?: RetryConfig): Observable<Array<BlockProofs>>;
export declare function loadBlockProofsForRange(provider: Provider, chainId: SupportedNetwork, blockRangeFilter: BlockRangeFilter, retryConfig?: RetryConfig): Promise<Array<BlockProofs>>;
export declare function mapLoadBlockProofs(provider: Provider, chainId: SupportedNetwork, retryConfig?: RetryConfig): OperatorFunction<Block, BlockProofs>;
export declare function mapLoadBlockProofsForRange(provider: Provider, chainId: SupportedNetwork, retryConfig?: RetryConfig): OperatorFunction<BlockRangeFilter, Array<BlockProofs>>;
export declare type BlocksProofsLoaderParams = {
    provider: Provider;
    chainId: SupportedNetwork;
    fromBlock: number;
    toBlock: number;
    retryConfig?: RetryConfig;
    blockLoadBuffer?: number;
};
export declare function createBlocksProofsLoader({ provider, chainId, fromBlock, toBlock, retryConfig, blockLoadBuffer, }: BlocksProofsLoaderParams): Observable<BlockProofs>;
export declare type AncestorBlocksProofsLoaderParams = {
    provider: Provider;
    chainId: SupportedNetwork;
    initialBlock: BlockTag;
    targetAncestorHash: string;
    retryConfig?: RetryConfig;
    maxConcurrency?: number;
};
export declare function createAncestorBlocksProofsLoader({ provider, chainId, initialBlock, targetAncestorHash, retryConfig, maxConcurrency, }: AncestorBlocksProofsLoaderParams): Observable<BlockProofs>;
//# sourceMappingURL=loader.d.ts.map