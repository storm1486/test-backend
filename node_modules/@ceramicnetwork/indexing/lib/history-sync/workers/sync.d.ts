import { default as PgBoss } from 'pg-boss';
import { type SendOptions } from 'pg-boss';
import { IJobQueue, Job, Worker } from '@ceramicnetwork/job-queue';
import type { SupportedNetwork } from '@ceramicnetwork/anchor-utils';
import type { Provider } from '@ethersproject/providers';
import { JobData, SyncJobType } from '../interfaces.js';
import { DiagnosticsLogger } from '@ceramicnetwork/common';
import { SyncJobData } from '../interfaces.js';
export declare function createContinuousSyncJob(data: SyncJobData, options?: SendOptions): Job<SyncJobData>;
export declare function createHistorySyncJob(data: SyncJobData, options?: SendOptions): Job<SyncJobData>;
export interface SyncCompleteData {
    jobType: SyncJobType;
    modelId: string;
}
export declare class SyncWorker implements Worker<SyncJobData> {
    private readonly provider;
    private readonly jobQueue;
    private readonly chainId;
    private readonly logger;
    private readonly syncCompleteCallback;
    constructor(provider: Provider, jobQueue: IJobQueue<JobData>, chainId: SupportedNetwork, logger: DiagnosticsLogger, syncCompleteCallback: (data: SyncCompleteData) => void);
    handler(job: PgBoss.Job): Promise<void>;
}
//# sourceMappingURL=sync.d.ts.map