import type { CID } from 'multiformats/cid';
import type { StreamID } from '@ceramicnetwork/streamid';
import type { SupportedNetwork } from '@ceramicnetwork/anchor-utils';
export declare type SyncConfig = {
    db: string;
    chainId: SupportedNetwork;
};
export interface ISyncQueryApi {
    syncComplete(model: string): boolean;
}
export declare type ModelSyncOptions = {
    startBlock?: number;
    endBlock?: number;
};
export interface ISyncApi extends ISyncQueryApi {
    startModelSync(models: string | string[], modelSyncOptions?: ModelSyncOptions): Promise<void>;
    stopModelSync(models: string | string[]): Promise<void>;
    shutdown(): Promise<void>;
    enabled: boolean;
}
export declare type HandleCommit = (streamId: StreamID, commit: CID, model?: StreamID) => Promise<void>;
export interface IpfsService {
    retrieveFromIPFS(cid: CID | string, path?: string): Promise<any>;
    retrieveCommit(cid: CID | string, streamId: StreamID): Promise<any>;
    storeCommit(data: any, streamId?: StreamID): Promise<CID>;
    storeRecord(record: Record<string, unknown>): Promise<CID>;
}
export interface TreeMetadata {
    numEntries: number;
    streamIds: string[];
}
export declare const REBUILD_ANCHOR_JOB = "rebuildAnchorJob";
export interface RebuildAnchorJobData {
    models: string[];
    chainId: string;
    txHash: string;
    root: string;
    txType?: string;
}
export declare const HISTORY_SYNC_JOB = "historySyncJob";
export declare const CONTINUOUS_SYNC_JOB = "continuousSyncJob";
export declare type SyncJob = typeof HISTORY_SYNC_JOB | typeof CONTINUOUS_SYNC_JOB;
export declare enum SyncJobType {
    Catchup = 0,
    Reorg = 1,
    Full = 2,
    Continuous = 3
}
export interface SyncJobData {
    currentBlock?: number;
    jobType: SyncJobType;
    fromBlock: number;
    toBlock: number;
    models: string[];
}
export declare type JobData = RebuildAnchorJobData | SyncJobData;
//# sourceMappingURL=interfaces.d.ts.map