import { type BlockProofsListenerEvent } from '@ceramicnetwork/anchor-listener';
import type { DiagnosticsLogger } from '@ceramicnetwork/common';
import type { Provider } from '@ethersproject/providers';
import type { LocalIndexApi } from '../local-index-api.js';
import { HandleCommit, ISyncApi, IpfsService, SyncJobData, type SyncJob, type ModelSyncOptions } from './interfaces.js';
import { SyncCompleteData } from './workers/sync.js';
export declare const BLOCK_CONFIRMATIONS = 20;
export declare const INITIAL_INDEXING_BLOCKS: Record<string, number>;
export declare const STATE_TABLE_NAME = "ceramic_indexing_state";
declare type StoredState = {
    processedBlockHash?: string;
    processedBlockNumber?: number;
};
export declare type SyncConfig = {
    db: string;
    on?: boolean;
};
export interface ActiveSyncStatus {
    startBlock: number;
    currentBlock: number;
    endBlock: number;
    models: Array<string>;
    createdAt: Date;
    startedAt: Date;
}
export interface ContinuousSyncStatus {
    startBlock: number;
    latestBlock: number;
    confirmations: number;
    currentBlock: number;
    models: Array<string>;
}
export interface PendingSyncStatus {
    startBlock: number;
    endBlock: number;
    models: Array<string>;
    createdAt: Date;
}
export interface SyncStatus {
    activeSyncs: Array<ActiveSyncStatus>;
    continuousSync: Array<ContinuousSyncStatus>;
    pendingSyncs: Array<PendingSyncStatus>;
}
export declare class SyncApi implements ISyncApi {
    private readonly syncConfig;
    private readonly ipfsService;
    private readonly handleCommit;
    private readonly localIndex;
    private readonly diagnosticsLogger;
    readonly modelsToSync: Set<string>;
    readonly modelsToHistoricSync: Map<string, number>;
    private readonly dataSource;
    private readonly jobQueue;
    private subscription;
    private provider;
    private chainId;
    private defaultStartBlock;
    private periodicStatusLogger;
    private currentBlock;
    private startBlock;
    constructor(syncConfig: SyncConfig, ipfsService: IpfsService, handleCommit: HandleCommit, localIndex: LocalIndexApi, diagnosticsLogger: DiagnosticsLogger);
    init(provider: Provider): Promise<void>;
    _initJobQueue(): Promise<void>;
    _upsertModelForHistoricSync(model: string): void;
    _initModelsToSync(): Promise<void>;
    _initStateTable(): Promise<StoredState>;
    _initBlockSubscription(expectedParentHash?: string): void;
    _handleBlockProofs({ block, reorganized }: BlockProofsListenerEvent): Promise<void>;
    _addSyncJob(type: SyncJob, data: SyncJobData): Promise<void>;
    _updateStoredState(state: StoredState): Promise<void>;
    _logSyncStatus(): Promise<void>;
    syncStatus(): Promise<SyncStatus>;
    _initPeriodicStatusLogger(): void;
    startModelSync(models: string | string[], syncOptions?: ModelSyncOptions): Promise<void>;
    stopModelSync(models: string | string[]): Promise<void>;
    syncCompletedForModel(data: SyncCompleteData): void;
    syncComplete(model: string): boolean;
    shutdown(): Promise<void>;
    get enabled(): boolean;
}
export {};
//# sourceMappingURL=sync-api.d.ts.map