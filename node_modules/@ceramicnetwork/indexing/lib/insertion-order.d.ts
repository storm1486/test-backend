import { type Knex } from 'knex';
import { StreamID } from '@ceramicnetwork/streamid';
import type { BaseQuery, Page, Pagination } from '@ceramicnetwork/common';
export declare type StreamContent = Record<string, unknown>;
export declare type QueryResult = {
    stream_id: string;
    last_anchored_at?: number;
    created_at: number;
    stream_content: string;
};
export declare type QueryBuilder = Knex.QueryBuilder<any, Array<QueryResult>>;
declare type InternalQuery = Omit<BaseQuery, 'model' | 'models'>;
declare type PageQuery = InternalQuery & Pagination;
export declare class InsertionOrder {
    private readonly dbConnection;
    constructor(dbConnection: Knex);
    page(models: Set<string>, query: PageQuery): Promise<Page<StreamID>>;
    private forwardQuery;
    private backwardQuery;
    private query;
    applyFilters(builder: Knex.QueryBuilder, query: BaseQuery): Knex.QueryBuilder;
    private applyCursor;
    private applySorting;
}
export {};
//# sourceMappingURL=insertion-order.d.ts.map