import type { BaseQuery, IndexApi, ModelData, Page, PaginationQuery, StreamState, DiagnosticsLogger, CeramicCoreApi } from '@ceramicnetwork/common';
import type { IndexModelArgs } from './database-index-api.js';
import { IndexStreamArgs } from './database-index-api.js';
import { StreamID } from '@ceramicnetwork/streamid';
import { IndexingConfig } from './build-indexing.js';
import { Networks } from '@ceramicnetwork/common';
import { type LoadingInterfaceImplements } from '@ceramicnetwork/stream-model';
import { ISyncQueryApi } from './history-sync/interfaces.js';
export declare class LocalIndexApi implements IndexApi {
    private readonly core;
    private readonly logger;
    private readonly databaseIndexApi;
    readonly enabled: boolean;
    constructor(indexingConfig: IndexingConfig | undefined, core: CeramicCoreApi, logger: DiagnosticsLogger, networkName: Networks);
    setSyncQueryApi(api: ISyncQueryApi): void;
    shouldIndexStream(args: StreamID): boolean;
    indexStream(args: IndexStreamArgs): Promise<void>;
    count(query: BaseQuery): Promise<number>;
    query(query: PaginationQuery): Promise<Page<StreamState | null>>;
    indexedModels(): Array<ModelData>;
    convertModelDataToIndexModelsArgs(modelsNoLongerIndexed: Array<ModelData>, modelData: ModelData, loading?: LoadingInterfaceImplements): Promise<IndexModelArgs>;
    indexModels(models: Array<ModelData>): Promise<void>;
    stopIndexingModels(models: Array<ModelData>): Promise<void>;
    init(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=local-index-api.d.ts.map