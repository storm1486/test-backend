import { QueryFilters as ApiQueryFilters, ObjectFilter as ApiObjectFilter, NonEmptyArray } from '@ceramicnetwork/common';
export declare type NonBooleanValueFilterType = 'number' | 'string';
export declare type ValueFilterType = 'boolean' | 'number' | 'string';
export declare type ValueFilter<T extends boolean | number | string = boolean | number | string> = {
    type: ValueFilterType;
    op: 'null';
    value: boolean;
} | {
    type: ValueFilterType;
    op: '=';
    value: T;
} | {
    type: ValueFilterType;
    op: '!=';
    value: T;
};
export declare type NonBooleanValueFilter<T extends number | string = number | string> = {
    type: NonBooleanValueFilterType;
    op: 'in';
    value: Array<T>;
} | {
    type: NonBooleanValueFilterType;
    op: 'nin';
    value: Array<T>;
} | {
    type: NonBooleanValueFilterType;
    op: '>';
    value: T;
} | {
    type: NonBooleanValueFilterType;
    op: '>=';
    value: T;
} | {
    type: NonBooleanValueFilterType;
    op: '<';
    value: T;
} | {
    type: NonBooleanValueFilterType;
    op: '<=';
    value: T;
};
export declare type AllValueFilter = ValueFilter | NonBooleanValueFilter;
declare type ParsedObjectFilter = Record<string, NonEmptyArray<AllValueFilter>>;
export declare type ObjectFilter = Record<string, AllValueFilter>;
export declare type QueryFilters = {
    type: 'where';
    value: ObjectFilter;
} | {
    type: 'and';
    value: Array<QueryFilters>;
} | {
    type: 'or';
    value: Array<QueryFilters>;
} | {
    type: 'not';
    value: QueryFilters;
};
export declare function getNonBooleanValueType<T extends number | string>(value: T): NonBooleanValueFilterType;
export declare function getValueType<T extends boolean | number | string>(value: T): ValueFilterType;
export declare function parseObjectFilter(filter: ApiObjectFilter): ParsedObjectFilter;
export declare function parseQueryFilters(filter: ApiQueryFilters): QueryFilters;
export {};
//# sourceMappingURL=query-filter-parser.d.ts.map