import type { Knex } from 'knex';
import { FieldsIndex, Networks } from '@ceramicnetwork/common';
export declare enum DatabaseType {
    POSTGRES = "postgres",
    SQLITE = "sqlite"
}
export declare enum ColumnType {
    STRING = 0
}
export declare type ColumnInfo = {
    name: string;
    type: ColumnType;
};
export declare type TableIndex = {
    keys: Array<string>;
    name: string;
    indexType: Knex.storageEngineIndexType;
};
export declare type TableIndices = {
    indexName: string;
    indices: Array<TableIndex>;
};
export declare function indexNameFromTableName(tableName: string): string;
export declare function defaultIndices(tableName: string): TableIndices;
export declare function getDefaultCDBDatabaseConfig(networkName: string): {
    [key: string]: any;
};
export declare function createPostgresModelTable(dataSource: Knex, tableName: string, extraColumns: Array<ColumnInfo>): Promise<void>;
export declare function createSqliteModelTable(dataSource: Knex, tableName: string, extraColumns: Array<ColumnInfo>): Promise<void>;
export declare function createPostgresIndices(dataSource: Knex, tableName: string, indices: Array<FieldsIndex>): Promise<void>;
export declare function createSqliteIndices(dataSource: Knex, tableName: string, indices: Array<FieldsIndex>): Promise<void>;
export declare function createConfigTable(dataSource: Knex, tableName: string, network: Networks, jsonb_support: boolean): Promise<void>;
export declare function migrateConfigTable(dataSource: Knex, tableName: string, jsonb_support: boolean): Promise<void>;
//# sourceMappingURL=1-create-model-table.d.ts.map