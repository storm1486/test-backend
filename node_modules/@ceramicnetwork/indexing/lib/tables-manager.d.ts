import { DatabaseType } from './migrations/1-create-model-table.js';
import { Knex } from 'knex';
import { DiagnosticsLogger, Networks } from '@ceramicnetwork/common';
import { IndexModelArgs } from './database-index-api.js';
declare type ConfigTable = {
    readonly tableName: string;
    readonly validSchema: object;
};
export declare class TablesManager {
    readonly dbType: DatabaseType;
    readonly dataSource: Knex;
    readonly logger: DiagnosticsLogger;
    constructor(dbType: DatabaseType, dataSource: Knex, logger: DiagnosticsLogger);
    listMidTables(): Promise<Array<string>>;
    initMidTables(_modelsToIndex: Array<IndexModelArgs>): Promise<void>;
    hasMidIndices(_tableName: string, _args: IndexModelArgs): Promise<boolean>;
    hasJsonBSupport(): boolean;
    listConfigTables(): Array<ConfigTable>;
    initConfigTables(network: Networks): Promise<void>;
    initConfigTable(table: ConfigTable, network: Networks): Promise<void>;
    _verifyConfigTables(): Promise<void>;
    _verifyConfigTable(table: ConfigTable): Promise<void>;
    _verifyMidTables(modelsToIndex: Array<IndexModelArgs>): Promise<void>;
    _verifyMidTable(tableName: string, modelsToIndex: Array<IndexModelArgs>): Promise<void>;
    verifyTables(modelsToIndex: Array<IndexModelArgs>): Promise<void>;
}
export declare class PostgresTablesManager extends TablesManager {
    constructor(dataSource: Knex, logger: DiagnosticsLogger);
    listMidTables(): Promise<Array<string>>;
    initMidTables(modelsToIndex: Array<IndexModelArgs>): Promise<void>;
    initMidTable(modelIndexArgs: IndexModelArgs): Promise<void>;
    hasMidIndices(tableName: string, args: IndexModelArgs): Promise<boolean>;
    hasJsonBSupport(): boolean;
}
export declare class SqliteTablesManager extends TablesManager {
    constructor(dataSource: Knex, logger: DiagnosticsLogger);
    listMidTables(): Promise<Array<string>>;
    initMidTables(modelsToIndex: Array<IndexModelArgs>): Promise<void>;
    initMidTable(modelIndexArgs: IndexModelArgs, existingTables: Array<string>): Promise<void>;
    hasMidIndices(tableName: string, args: IndexModelArgs): Promise<boolean>;
    hasJsonBSupport(): boolean;
}
export {};
//# sourceMappingURL=tables-manager.d.ts.map