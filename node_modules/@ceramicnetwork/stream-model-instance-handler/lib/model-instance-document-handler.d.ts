import { ModelInstanceDocument, ModelInstanceDocumentMetadata } from '@ceramicnetwork/stream-model-instance';
import { CeramicApi, CommitData, Context, StreamConstructor, StreamHandler, StreamState } from '@ceramicnetwork/common';
import { Model } from '@ceramicnetwork/stream-model';
interface ModelInstanceDocumentHeader extends ModelInstanceDocumentMetadata {
    unique?: Uint8Array;
}
export declare class ModelInstanceDocumentHandler implements StreamHandler<ModelInstanceDocument> {
    private readonly _schemaValidator;
    constructor();
    get type(): number;
    get name(): string;
    get stream_constructor(): StreamConstructor<ModelInstanceDocument>;
    applyCommit(commitData: CommitData, context: Context, state?: StreamState): Promise<StreamState>;
    _applyGenesis(commitData: CommitData, context: Context): Promise<StreamState>;
    _applySigned(commitData: CommitData, state: StreamState, context: Context): Promise<StreamState>;
    _applyAnchor(commitData: CommitData, state: StreamState): Promise<StreamState>;
    _validateModel(model: Model): void;
    _validateContent(ceramic: CeramicApi, model: Model, content: any, genesis: boolean): Promise<void>;
    _validateRelationsContent(ceramic: CeramicApi, model: Model, content: any): Promise<void>;
    _validateHeader(model: Model, header: ModelInstanceDocumentHeader): Promise<void>;
}
export {};
//# sourceMappingURL=model-instance-document-handler.d.ts.map