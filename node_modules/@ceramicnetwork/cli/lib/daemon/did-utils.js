import { Ed25519Provider } from 'key-did-provider-ed25519';
import * as u8a from 'uint8arrays';
import { DID } from 'dids';
import * as KeyDidResolver from 'key-did-resolver';
import { Resolver } from 'did-resolver';
import { randomBytes } from '@stablelib/random';
export function makeNodeDID(seed) {
    const provider = makeNodeDIDProvider(seed);
    const keyDidResolver = KeyDidResolver.getResolver();
    const resolver = new Resolver({ ...keyDidResolver });
    return new DID({ provider, resolver });
}
export function makeNodeDIDProvider(seed) {
    return new Ed25519Provider(seed);
}
export function generateSeed() {
    return u8a.toString(randomBytes(32), 'base16');
}
export function generateSeedUrl() {
    const seed = generateSeed();
    const url = `inplace:ed25519#${seed}`;
    return new URL(url);
}
export function parseSeedUrl(seedUrl) {
    if (seedUrl.protocol != 'inplace:' || seedUrl.pathname != 'ed25519') {
        throw Error('Unsupported url format for seed. Must be `inplace:ed25519#seed`.');
    }
    const seed = seedUrl.hash.slice(1);
    return parseSeed(seed);
}
export function parseSeed(seed) {
    return u8a.fromString(seed, 'base16');
}
//# sourceMappingURL=did-utils.js.map