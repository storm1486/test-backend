const MAX_ENTRIES_ALLOWED = 1000;
function isPositiveInteger(input) {
    return typeof input === 'number' && Math.floor(input) === input && input > 0;
}
export class InvalidPaginationError extends Error {
    constructor() {
        super(`Can not parse pagination fields: either "first" or "last" should be positive integers`);
    }
}
export class MaxEntriesError extends Error {
    constructor(requestedEntries) {
        super(`Requested too many entries: ${requestedEntries}. Maximum is ${MAX_ENTRIES_ALLOWED}`);
    }
}
function assertPageLimit(requestedEntries) {
    if (requestedEntries > MAX_ENTRIES_ALLOWED) {
        throw new MaxEntriesError(requestedEntries);
    }
}
export function parsePagination(params) {
    if (isPositiveInteger(params.first)) {
        assertPageLimit(params.first);
        return {
            first: params.first,
            after: params.after,
        };
    }
    else if (isPositiveInteger(params.last)) {
        assertPageLimit(params.last);
        return {
            last: params.last,
            before: params.before,
        };
    }
    else {
        throw new InvalidPaginationError();
    }
}
export function collectionQuery(query) {
    try {
        const pagination = parsePagination(query);
        return {
            model: query.model,
            models: query.models,
            account: query.account,
            filter: query.filter,
            queryFilters: query.queryFilters,
            sorting: query.sorting,
            ...pagination,
        };
    }
    catch (e) {
        throw new Error(`Invalid input in collection request: ${e.message}`);
    }
}
export function countQuery(query) {
    return {
        model: query.model,
        models: query.models,
        account: query.account,
        filter: query.filter,
        queryFilters: query.queryFilters,
    };
}
//# sourceMappingURL=collection-queries.js.map