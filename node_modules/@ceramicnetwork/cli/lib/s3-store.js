var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _S3StoreMap_storeRoot, _S3StoreMap_defaultLocation, _S3StoreMap_map, _S3StoreMap_customEndpoint, _S3Store_bucketName, _S3Store_customEndpoint, _S3Store_diagnosticsLogger, _S3Store_storeMap, _S3Store_loadingLimit;
import { Networks } from '@ceramicnetwork/common';
import LevelUp from 'levelup';
import S3LevelDOWN from 's3leveldown';
import toArray from 'stream-to-array';
import PQueue from 'p-queue';
import AWSSDK from 'aws-sdk';
const MAX_LOAD_RPS = 4000;
const DEFAULT_S3_STORE_USE_CASE_NAME = 'default';
class S3StoreMap {
    constructor(networkName, bucketName, customEndpoint) {
        _S3StoreMap_storeRoot.set(this, void 0);
        _S3StoreMap_defaultLocation.set(this, void 0);
        _S3StoreMap_map.set(this, void 0);
        _S3StoreMap_customEndpoint.set(this, void 0);
        this.networkName = networkName;
        __classPrivateFieldSet(this, _S3StoreMap_storeRoot, bucketName + '/ceramic/' + this.networkName, "f");
        __classPrivateFieldSet(this, _S3StoreMap_defaultLocation, 'state-store', "f");
        __classPrivateFieldSet(this, _S3StoreMap_map, new Map(), "f");
        __classPrivateFieldSet(this, _S3StoreMap_customEndpoint, customEndpoint, "f");
    }
    createStore(useCaseName = DEFAULT_S3_STORE_USE_CASE_NAME) {
        const fullLocation = this.getFullLocation(useCaseName);
        const storePath = `${__classPrivateFieldGet(this, _S3StoreMap_storeRoot, "f")}/${fullLocation}`;
        const levelDown = __classPrivateFieldGet(this, _S3StoreMap_customEndpoint, "f")
            ? new S3LevelDOWN(storePath, new AWSSDK.S3({
                endpoint: __classPrivateFieldGet(this, _S3StoreMap_customEndpoint, "f"),
            }))
            : new S3LevelDOWN(storePath);
        const levelUp = new LevelUp(levelDown);
        __classPrivateFieldGet(this, _S3StoreMap_map, "f").set(fullLocation, levelUp);
    }
    getFullLocation(useCaseName = DEFAULT_S3_STORE_USE_CASE_NAME) {
        if (useCaseName === DEFAULT_S3_STORE_USE_CASE_NAME) {
            return __classPrivateFieldGet(this, _S3StoreMap_defaultLocation, "f");
        }
        else {
            return `${__classPrivateFieldGet(this, _S3StoreMap_defaultLocation, "f")}-${useCaseName}`;
        }
    }
    async get(useCaseName) {
        if (!__classPrivateFieldGet(this, _S3StoreMap_map, "f").get(this.getFullLocation(useCaseName))) {
            await this.createStore(useCaseName);
        }
        return __classPrivateFieldGet(this, _S3StoreMap_map, "f").get(this.getFullLocation(useCaseName));
    }
    values() {
        return __classPrivateFieldGet(this, _S3StoreMap_map, "f").values();
    }
}
_S3StoreMap_storeRoot = new WeakMap(), _S3StoreMap_defaultLocation = new WeakMap(), _S3StoreMap_map = new WeakMap(), _S3StoreMap_customEndpoint = new WeakMap();
export class S3Store {
    constructor(networkName, diagnosticsLogger, bucketName, customEndpoint) {
        _S3Store_bucketName.set(this, void 0);
        _S3Store_customEndpoint.set(this, void 0);
        _S3Store_diagnosticsLogger.set(this, void 0);
        _S3Store_storeMap.set(this, void 0);
        _S3Store_loadingLimit.set(this, new PQueue({
            intervalCap: MAX_LOAD_RPS,
            interval: 1000,
            carryoverConcurrencyCount: true,
        }));
        __classPrivateFieldSet(this, _S3Store_bucketName, bucketName, "f");
        __classPrivateFieldSet(this, _S3Store_customEndpoint, customEndpoint, "f");
        __classPrivateFieldSet(this, _S3Store_diagnosticsLogger, diagnosticsLogger, "f");
        __classPrivateFieldSet(this, _S3Store_storeMap, new S3StoreMap(networkName, bucketName, customEndpoint), "f");
    }
    get networkName() {
        return __classPrivateFieldGet(this, _S3Store_storeMap, "f").networkName;
    }
    async init() {
        if (this.networkName === Networks.MAINNET) {
            const s3 = new AWSSDK.S3();
            const res = await s3
                .listObjectsV2({ Bucket: __classPrivateFieldGet(this, _S3Store_bucketName, "f"), Prefix: 'ceramic/elp', MaxKeys: 1 })
                .promise();
            if (res.Contents?.length) {
                __classPrivateFieldGet(this, _S3Store_diagnosticsLogger, "f").warn(`S3 bucket found with ELP location, using it instead of default mainnet location for state store`);
                __classPrivateFieldSet(this, _S3Store_storeMap, new S3StoreMap('elp', __classPrivateFieldGet(this, _S3Store_bucketName, "f"), __classPrivateFieldGet(this, _S3Store_customEndpoint, "f")), "f");
            }
        }
    }
    async close(useCaseName) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(useCaseName);
        await store.close();
    }
    async isEmpty(params) {
        const result = await this.findKeys({
            limit: 1,
            ...params,
        });
        return result.length > 0;
    }
    async exists(key, useCaseName) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(useCaseName);
        try {
            const value = await store.get(key);
            return value !== undefined;
        }
        catch (e) {
            if (/Key not found in database/.test(e.toString())) {
                return false;
            }
            else {
                throw e;
            }
        }
    }
    async find(params) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(params?.useCaseName);
        const options = {
            limit: params?.limit,
        };
        if (params?.gt)
            options.gt = params.gt;
        const dataArray = await toArray(store.createReadStream(options));
        return dataArray.map((data) => {
            return { key: data.key.toString(), value: JSON.parse(data.value.toString()) };
        });
    }
    async findKeys(params) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(params?.useCaseName);
        const bufArray = await toArray(store.createKeyStream({
            limit: params?.limit,
        }));
        return bufArray.map((buf) => buf.toString());
    }
    async get(key, useCaseName) {
        return __classPrivateFieldGet(this, _S3Store_loadingLimit, "f").add(async () => {
            const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(useCaseName);
            const value = await store.get(key);
            return JSON.parse(value);
        });
    }
    async put(key, value, useCaseName) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(useCaseName);
        return await store.put(key, JSON.stringify(value));
    }
    async del(key, useCaseName) {
        const store = await __classPrivateFieldGet(this, _S3Store_storeMap, "f").get(useCaseName);
        return await store.del(key);
    }
}
_S3Store_bucketName = new WeakMap(), _S3Store_customEndpoint = new WeakMap(), _S3Store_diagnosticsLogger = new WeakMap(), _S3Store_storeMap = new WeakMap(), _S3Store_loadingLimit = new WeakMap();
//# sourceMappingURL=s3-store.js.map