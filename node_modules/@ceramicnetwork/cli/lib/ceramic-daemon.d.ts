import { Request, Response, NextFunction } from 'express';
import { Ceramic, CeramicConfig } from '@ceramicnetwork/core';
import { DiagnosticsLogger } from '@ceramicnetwork/common';
import { ExpressWithAsync } from '@awaitjs/express';
import { DaemonConfig } from './daemon-config.js';
export declare function makeCeramicConfig(opts: DaemonConfig): CeramicConfig;
export declare class CeramicDaemon {
    ceramic: Ceramic;
    private readonly opts;
    private server?;
    private readonly app;
    readonly diagnosticsLogger: DiagnosticsLogger;
    hostname: string;
    port: number;
    private readonly adminDids;
    private readonly adminCodeCache;
    constructor(ceramic: Ceramic, opts: DaemonConfig);
    listen(): Promise<void>;
    static create(opts: DaemonConfig): Promise<CeramicDaemon>;
    registerAPIPaths(app: ExpressWithAsync, readOnly: boolean): void;
    generateAdminCode(): Promise<string>;
    _verifyAndDiscardAdminCode(code: string): void;
    healthcheck(req: Request, res: Response): Promise<void>;
    nodeStatus(req: Request, res: Response): Promise<void>;
    createStreamFromGenesis(req: Request, res: Response): Promise<void>;
    requestAnchor(req: Request, res: Response): Promise<void>;
    createReadOnlyStreamFromGenesis(req: Request, res: Response): Promise<void>;
    state(req: Request, res: Response): Promise<void>;
    commits(req: Request, res: Response): Promise<void>;
    getCollection_post(req: Request, res: Response): Promise<void>;
    _getCollection(httpQuery: Record<string, any>): Promise<Record<string, any>>;
    getCollectionCount_post(req: Request, res: Response): Promise<void>;
    _getCollectionCount(httpQuery: Record<string, any>): Promise<Record<string, any>>;
    private _parseAdminApiJWS;
    private _validateAdminApiJWS;
    private _processAdminModelsMutationRequest;
    private _verifyActingDid;
    getAdminCode(req: Request, res: Response): Promise<void>;
    private _checkAdminAPIGETRequestAuthorization;
    getIndexedModels(req: Request, res: Response): Promise<void>;
    getIndexedModelData(req: Request, res: Response): Promise<void>;
    validateAdminRequest(req: Request, res: Response, next: NextFunction): Promise<void>;
    startIndexingModels(req: Request, res: Response): Promise<void>;
    startIndexingModelData(req: Request, res: Response): Promise<void>;
    stopIndexingModels(req: Request, res: Response): Promise<void>;
    stopIndexingModelData(req: Request, res: Response): Promise<void>;
    shutdownServer(req: Request, res: Response): Promise<void>;
    applyCommit(req: Request, res: Response): Promise<void>;
    multiQuery(req: Request, res: Response): Promise<void>;
    content(req: Request, res: Response): Promise<void>;
    pinStream(req: Request, res: Response): Promise<void>;
    unpinStream(req: Request, res: Response): Promise<void>;
    listPinned(req: Request, res: Response): Promise<void>;
    _notSupported(req: Request, res: Response): Promise<void>;
    _pinNotSupported(req: Request, res: Response): Promise<void>;
    _pinWarningOk(req: Request, res: Response): Promise<void>;
    getSupportedChains(req: Request, res: Response): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=ceramic-daemon.d.ts.map