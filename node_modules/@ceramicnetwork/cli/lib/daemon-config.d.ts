import 'reflect-metadata';
export declare enum IpfsMode {
    BUNDLED = "bundled",
    REMOTE = "remote"
}
export declare class DaemonIpfsConfig {
    mode?: IpfsMode;
    host?: string;
    pinningEndpoints?: string[];
    disablePeerDataSync?: boolean;
}
export declare enum StateStoreMode {
    S3 = "s3",
    FS = "fs"
}
export declare class DaemonStateStoreConfig {
    mode?: StateStoreMode;
    localDirectory?: string;
    s3Bucket?: string;
    s3Endpoint?: string;
}
export declare class DaemonHTTPApiConfig {
    hostname?: string;
    port?: number;
    corsAllowedOrigins?: RegExp[];
    adminDids?: Array<string>;
}
export declare class DaemonCeramicNetworkConfig {
    name?: string;
    pubsubTopic?: string;
}
export declare class DaemonAnchorConfig {
    anchorServiceUrl?: string;
    authMethod?: string;
    ethereumRpcUrl?: string;
}
export declare class IndexingConfig {
    db: string;
    allowQueriesBeforeHistoricalSync: boolean;
    disableComposedb: boolean;
    enableHistoricalSync: boolean;
}
export declare class DaemonCeramicNodeConfig {
    private _privateSeedUrl;
    get privateSeedUrl(): string;
    set privateSeedUrl(value: string);
    sensitive_privateSeedUrl(): string;
    readOnly?: boolean;
    syncOverride?: string;
    disableComposedb?: boolean;
    streamCacheLimit?: number;
}
export declare class DaemonLoggerConfig {
    logDirectory?: string;
    logLevel?: number;
    logToFiles?: boolean;
}
export declare class DaemonMetricsConfig {
    prometheusExporterEnabled?: boolean;
    prometheusExporterPort?: number;
    metricsExporterEnabled?: boolean;
    collectorHost?: string;
}
export declare class DaemonConfig {
    anchor: DaemonAnchorConfig;
    httpApi: DaemonHTTPApiConfig;
    ipfs: DaemonIpfsConfig;
    logger: DaemonLoggerConfig;
    metrics: DaemonMetricsConfig;
    network: DaemonCeramicNetworkConfig;
    node: DaemonCeramicNodeConfig;
    stateStore: DaemonStateStoreConfig;
    indexing?: IndexingConfig;
    static fromString(jsonString: string): DaemonConfig;
    static fromFile(filepath: URL): Promise<DaemonConfig>;
    static fromObject(json: Record<string, any>): DaemonConfig;
}
export declare function validateConfig(config: DaemonConfig): void;
//# sourceMappingURL=daemon-config.d.ts.map