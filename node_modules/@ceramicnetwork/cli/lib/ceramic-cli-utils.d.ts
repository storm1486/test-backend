import { CeramicClient } from '@ceramicnetwork/http-client';
import { CeramicDaemon } from './ceramic-daemon.js';
import { DaemonConfig } from './daemon-config.js';
import { DID } from 'dids';
export declare class CeramicCliUtils {
    static createDaemon(configFilename: string | undefined, ipfsApi: string, ethereumRpc: string, anchorServiceApi: string, ipfsPinningEndpoints: string[], stateStoreDirectory: string, stateStoreS3Bucket: string, port: number, hostname: string, debug: boolean, verbose: boolean, logToFiles: boolean, logDirectory: string, metricsExporterEnabled: boolean, collectorHost: string, network: string, pubsubTopic: string, corsAllowedOrigins: string, syncOverride: string, disableComposedb: boolean, readOnly: boolean): Promise<CeramicDaemon>;
    static _createDoc(content: string, controllers: string, onlyGenesis: boolean, deterministic: boolean, schemaStreamId?: string): Promise<void>;
    static update(streamId: string, content: string, controllers: string, schemaCommitId?: string): Promise<void>;
    static show(streamRef: string): Promise<void>;
    static state(streamRef: string): Promise<void>;
    static watch(streamId: string): Promise<void>;
    static commits(streamId: string): Promise<void>;
    static nonSchemaCreateDoc(content: string, controllers: string, onlyGenesis: boolean, deterministic: boolean, schemaStreamId?: string): Promise<void>;
    static schemaCreateDoc(content: string, controllers: string, onlyGenesis: boolean, deterministic: boolean): Promise<void>;
    static schemaUpdateDoc(schemaStreamId: string, content: string, controllers: string): Promise<void>;
    static pinAdd(streamId: string, privateKey?: string): Promise<void>;
    static pinRm(streamId: string, privateKey?: string): Promise<void>;
    static pinLs(streamId?: string, privateKey?: string): Promise<void>;
    static status(): Promise<void>;
    static _makeDID(seed: Uint8Array, ceramic: CeramicClient): DID;
    static _authenticateClient(ceramic: CeramicClient, privateKey: string): Promise<void>;
    static _runWithCeramicClient(fn: (ceramic: CeramicClient) => Promise<void>): Promise<void>;
    static showCliConfig(): Promise<void>;
    static setCliConfig(variable: string, value: any): Promise<void>;
    static unsetCliConfig(variable: string): Promise<void>;
    private static _loadCliConfig;
    private static _loadCliConfigFileContents;
    static _loadDaemonConfig(filepath: URL): Promise<DaemonConfig>;
    static _saveConfig(config: Record<string, any>, filename: URL): Promise<void>;
    static _parseContent(content: string): any;
    static _parseControllers(controllers: string): string[] | undefined;
}
//# sourceMappingURL=ceramic-cli-utils.d.ts.map