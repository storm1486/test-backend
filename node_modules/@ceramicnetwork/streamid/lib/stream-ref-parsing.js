import { readCid, readVarint } from './reading-bytes.js';
import { STREAMID_CODEC } from './constants.js';
import { CID } from 'multiformats/cid';
import { base36 } from 'multiformats/bases/base36';
export function fromBytes(input, title = 'StreamRef') {
    const [streamCodec, streamCodecRemainder] = readVarint(input);
    if (streamCodec !== STREAMID_CODEC)
        throw new Error(`Invalid ${title}, does not include streamid codec`);
    const [type, streamtypeRemainder] = readVarint(streamCodecRemainder);
    const cidResult = readCid(streamtypeRemainder);
    const [genesis, genesisRemainder] = cidResult;
    if (genesisRemainder.length === 0) {
        return {
            kind: 'stream-id',
            type: type,
            genesis: genesis,
        };
    }
    else if (genesisRemainder.length === 1 && genesisRemainder[0] === 0) {
        return {
            kind: 'commit-id',
            type: type,
            genesis: genesis,
            commit: null,
        };
    }
    else {
        const [commit] = readCid(genesisRemainder);
        return {
            kind: 'commit-id',
            type: type,
            genesis: genesis,
            commit: commit,
        };
    }
}
const URL_PATTERN = /(ceramic:\/\/|\/ceramic\/)?([a-zA-Z0-9]+)(\?commit=([a-zA-Z0-9]+))?/;
export function fromString(input, title = 'StreamRef') {
    const protocolMatch = URL_PATTERN.exec(input) || [];
    const base = protocolMatch[2];
    if (!base)
        throw new Error(`Malformed ${title} string: ${input}`);
    const bytes = base36.decode(base);
    const streamRef = fromBytes(bytes);
    const commit = protocolMatch[4];
    if (commit) {
        return {
            kind: 'commit-id',
            type: streamRef.type,
            genesis: streamRef.genesis,
            commit: parseCommit(streamRef.genesis, commit),
        };
    }
    return streamRef;
}
export function parseCID(input) {
    try {
        return typeof input === 'string' ? CID.parse(input) : CID.asCID(input);
    }
    catch {
        return null;
    }
}
export function parseCommit(genesis, commit = null) {
    if (!commit)
        return null;
    if (commit === '0')
        return null;
    const commitCID = parseCID(commit);
    if (commitCID) {
        if (genesis.equals(commitCID)) {
            return null;
        }
        else {
            return commitCID;
        }
    }
    else {
        throw new Error('Cannot specify commit as a number except to request commit 0 (the genesis commit)');
    }
}
//# sourceMappingURL=stream-ref-parsing.js.map