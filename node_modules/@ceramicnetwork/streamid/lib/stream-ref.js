import { StreamID } from './stream-id.js';
import { CommitID } from './commit-id.js';
import { base36 } from 'multiformats/bases/base36';
import * as parsing from './stream-ref-parsing.js';
export var StreamRef;
(function (StreamRef) {
    function fromBytes(input) {
        const parsed = parsing.fromBytes(input);
        switch (parsed.kind) {
            case 'commit-id':
                return new CommitID(parsed.type, parsed.genesis, parsed.commit);
            case 'stream-id':
                return new StreamID(parsed.type, parsed.genesis);
            default:
                throw new Error(`Malformed StreamRef bytes: ${base36.encode(input)}`);
        }
    }
    StreamRef.fromBytes = fromBytes;
    function fromString(input) {
        const parsed = parsing.fromString(input);
        switch (parsed.kind) {
            case 'commit-id':
                return new CommitID(parsed.type, parsed.genesis, parsed.commit);
            case 'stream-id':
                return new StreamID(parsed.type, parsed.genesis);
            default:
                throw new Error(`Malformed StreamRef string: ${input}`);
        }
    }
    StreamRef.fromString = fromString;
    function from(input) {
        if (StreamID.isInstance(input)) {
            return input;
        }
        if (CommitID.isInstance(input)) {
            return input;
        }
        if (input instanceof Uint8Array) {
            return fromBytes(input);
        }
        if (typeof input === 'string') {
            return fromString(input);
        }
        throw new Error(`Can not build CommitID or StreamID from ${JSON.stringify(input)}`);
    }
    StreamRef.from = from;
})(StreamRef || (StreamRef = {}));
//# sourceMappingURL=stream-ref.js.map