export declare const CacaoHeader: import("codeco").ExactCodec<import("codeco").TypeCodec<{
    t: import("codeco").KeyOfCodec<{
        eip4361: null;
        caip122: null;
    }>;
}>>;
export type CacaoHeader = {
    t: 'eip4361' | 'caip122';
};
export declare const CacaoPayload: import("codeco").SparseCodec<{
    domain: import("codeco").TrivialCodec<string>;
    iss: import("codeco").TrivialCodec<string>;
    aud: import("codeco").TrivialCodec<string>;
    version: import("codeco").TrivialCodec<string>;
    nonce: import("codeco").TrivialCodec<string>;
    iat: import("codeco").TrivialCodec<string>;
    nbf: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    exp: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    statement: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    requestId: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    resources: import("codeco").OptionalCodec<import("codeco").Codec<string[], string[], unknown> & {
        item: import("codeco").TrivialCodec<string>;
    }>;
}>;
export type CacaoPayload = {
    domain: string;
    iss: string;
    aud: string;
    version: string;
    nonce: string;
    iat: string;
    nbf?: string;
    exp?: string;
    statement?: string;
    requestId?: string;
    resources?: Array<string>;
};
export declare const CacaoSignature: import("codeco").ExactCodec<import("codeco").TypeCodec<{
    t: import("codeco").KeyOfCodec<{
        eip191: null;
        eip1271: null;
        'solana:ed25519': null;
        'tezos:ed25519': null;
        'stacks:secp256k1': null;
    }>;
    s: import("codeco").TrivialCodec<string>;
}>>;
export type CacaoSignature = {
    t: 'eip191' | 'eip1271' | 'solana:ed25519' | 'tezos:ed25519' | 'stacks:secp256k1' | 'webauthn:p256';
    s: string;
    m?: SignatureMeta;
};
export type SignatureMeta = any;
export declare const Cacao: import("codeco").SparseCodec<{
    h: import("codeco").ExactCodec<import("codeco").TypeCodec<{
        t: import("codeco").KeyOfCodec<{
            eip4361: null;
            caip122: null;
        }>;
    }>>;
    p: import("codeco").SparseCodec<{
        domain: import("codeco").TrivialCodec<string>;
        iss: import("codeco").TrivialCodec<string>;
        aud: import("codeco").TrivialCodec<string>;
        version: import("codeco").TrivialCodec<string>;
        nonce: import("codeco").TrivialCodec<string>;
        iat: import("codeco").TrivialCodec<string>;
        nbf: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        exp: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        statement: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        requestId: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        resources: import("codeco").OptionalCodec<import("codeco").Codec<string[], string[], unknown> & {
            item: import("codeco").TrivialCodec<string>;
        }>;
    }>;
    s: import("codeco").OptionalCodec<import("codeco").ExactCodec<import("codeco").TypeCodec<{
        t: import("codeco").KeyOfCodec<{
            eip191: null;
            eip1271: null;
            'solana:ed25519': null;
            'tezos:ed25519': null;
            'stacks:secp256k1': null;
        }>;
        s: import("codeco").TrivialCodec<string>;
    }>>>;
}>;
export type Cacao = {
    h: CacaoHeader;
    p: CacaoPayload;
    s?: CacaoSignature;
};
export declare const SignedCacao: import("codeco").ExactCodec<import("codeco").TypeCodec<{
    h: import("codeco").ExactCodec<import("codeco").TypeCodec<{
        t: import("codeco").KeyOfCodec<{
            eip4361: null;
            caip122: null;
        }>;
    }>>;
    p: import("codeco").SparseCodec<{
        domain: import("codeco").TrivialCodec<string>;
        iss: import("codeco").TrivialCodec<string>;
        aud: import("codeco").TrivialCodec<string>;
        version: import("codeco").TrivialCodec<string>;
        nonce: import("codeco").TrivialCodec<string>;
        iat: import("codeco").TrivialCodec<string>;
        nbf: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        exp: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        statement: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        requestId: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        resources: import("codeco").OptionalCodec<import("codeco").Codec<string[], string[], unknown> & {
            item: import("codeco").TrivialCodec<string>;
        }>;
    }>;
    s: import("codeco").ExactCodec<import("codeco").TypeCodec<{
        t: import("codeco").KeyOfCodec<{
            eip191: null;
            eip1271: null;
            'solana:ed25519': null;
            'tezos:ed25519': null;
            'stacks:secp256k1': null;
        }>;
        s: import("codeco").TrivialCodec<string>;
    }>>;
}>>;
export type SignedCacao = {
    h: CacaoHeader;
    p: CacaoPayload;
    s: CacaoSignature;
};
