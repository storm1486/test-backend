import type { CID } from 'multiformats';
export declare const JWSSignature: import("codeco").ExactCodec<import("codeco").TypeCodec<{
    protected: import("codeco").TrivialCodec<string>;
    signature: import("codeco").TrivialCodec<string>;
}>>;
export type JWSSignature = {
    protected: string;
    signature: string;
};
export declare const DagJWS: import("codeco").SparseCodec<{
    payload: import("codeco").TrivialCodec<string>;
    signatures: import("codeco").Codec<{
        protected: string;
        signature: string;
    }[], {
        protected: string;
        signature: string;
    }[], unknown> & {
        item: import("codeco").ExactCodec<import("codeco").TypeCodec<{
            protected: import("codeco").TrivialCodec<string>;
            signature: import("codeco").TrivialCodec<string>;
        }>>;
    };
    link: import("codeco").OptionalCodec<import("codeco").Type<CID<unknown, number, number, import("multiformats").Version>, string, string>>;
}>;
export type DagJWS = {
    payload: string;
    signatures: Array<JWSSignature>;
    link?: CID;
};
export declare const GeneralJWS: import("codeco").ExactCodec<import("codeco").TypeCodec<{
    payload: import("codeco").TrivialCodec<string>;
    signatures: import("codeco").Codec<{
        protected: string;
        signature: string;
    }[], {
        protected: string;
        signature: string;
    }[], unknown> & {
        item: import("codeco").ExactCodec<import("codeco").TypeCodec<{
            protected: import("codeco").TrivialCodec<string>;
            signature: import("codeco").TrivialCodec<string>;
        }>>;
    };
}>>;
export type GeneralJWS = {
    payload: string;
    signatures: Array<JWSSignature>;
};
