import { Multiaddr } from '@multiformats/multiaddr';
import type { Controller, ControllerOptions, InitOptions, IPFSAPI, PeerData, RemoteState } from './index.js';
/**
 * Controller for remote nodes
 */
declare class Client implements Controller {
    path: string;
    api: IPFSAPI;
    subprocess: null;
    opts: ControllerOptions;
    initialized: boolean;
    started: boolean;
    clean: boolean;
    apiAddr: Multiaddr;
    private readonly baseUrl;
    private readonly id;
    private readonly disposable;
    private gatewayAddr?;
    private grpcAddr?;
    private _peerId;
    constructor(baseUrl: string, remoteState: RemoteState, options: ControllerOptions);
    get peer(): PeerData;
    private _setApi;
    private _setGateway;
    private _setGrpc;
    private _createApi;
    init(initOptions?: InitOptions): Promise<Controller>;
    cleanup(): Promise<Controller>;
    start(): Promise<Controller>;
    stop(): Promise<Controller>;
    pid(): Promise<number>;
    version(): Promise<string>;
}
export default Client;
//# sourceMappingURL=ipfsd-client.d.ts.map