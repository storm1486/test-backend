import type { Opaque } from 'ts-essentials';
import { type Combinator } from 'codeco/linear';
export declare const wantClause: Combinator<{
    domain: string & import("ts-essentials").WithOpaque<"domain">;
    network: string;
}, string>;
export declare const address: Combinator<string, string>;
export declare const statementLine: Combinator<string, string>;
export declare const uriClause: Combinator<string & import("ts-essentials").WithOpaque<"URI">, string>;
export declare const versionClause: Combinator<string, string>;
export declare const chainIdClause: Combinator<string, string>;
export declare const nonce: Combinator<string, string>;
export declare const nonceClause: Combinator<string, string>;
export type DateTimeString = Opaque<string, 'date-time'>;
export declare const dateTime: Combinator<DateTimeString, string>;
export declare const issuedAtClause: Combinator<string & import("ts-essentials").WithOpaque<"date-time">, string>;
export declare const expirationTimeClause: Combinator<string & import("ts-essentials").WithOpaque<"date-time">, string>;
export declare const notBeforeClause: Combinator<string & import("ts-essentials").WithOpaque<"date-time">, string>;
export declare const anyPchar: Combinator<string, string>;
export declare const requestIdClause: Combinator<string, string>;
export declare const resourcesClause: Combinator<(string & import("ts-essentials").WithOpaque<"URI">)[], string>;
export declare const siwxMessage: Combinator<{
    domain: string & import("ts-essentials").WithOpaque<"domain">;
    network: string;
    address: string;
    statement: string | undefined;
    uri: string & import("ts-essentials").WithOpaque<"URI">;
    version: string;
    chainId: string;
    nonce: string;
    issuedAt: string & import("ts-essentials").WithOpaque<"date-time">;
    resources: (string & import("ts-essentials").WithOpaque<"URI">)[] | undefined;
}, string>;
