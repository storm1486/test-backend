import type { Opaque } from 'ts-essentials';
import { type Combinator } from 'codeco/linear';
export declare function toField<T>(combinator: Combinator<T, string>): (input: string) => T;
export type { DomainString } from './parsing/domain.js';
export declare const toDomainString: (input: string) => string & import("ts-essentials").WithOpaque<"domain">;
export type { DateTimeString } from './parsing/siwx-message.js';
export declare const toDateTimeString: (input: string) => string & import("ts-essentials").WithOpaque<"date-time">;
export type { URIString } from './parsing/uri.js';
export declare const toURIString: (input: string) => string & import("ts-essentials").WithOpaque<"URI">;
export type NonEmptyString = Opaque<string, 'non-empty'>;
export declare function toNonEmptyString<T = NonEmptyString>(input: string, name: string): T;
export type NetworkString = Opaque<string, 'network'>;
export type AddressString = Opaque<string, 'address'>;
export type VersionString = Opaque<'1', 'version'>;
export declare function toVersionString(input: string | number): VersionString;
export type ChainIdString = Opaque<string, 'chain-id'>;
export declare function toChainIdString(input: string | number): ChainIdString;
export type NonceString = Opaque<string, 'nonce'>;
export declare function toNonceString(input: string | number): NonceString;
