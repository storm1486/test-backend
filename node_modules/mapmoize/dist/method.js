import { Strategy, } from "./ancillary.js";
export function isMethodDescriptor(input) {
    return Boolean(input.value);
}
export function memoizeMethod(descriptor, propertyKey, strategy, hashFunction, argsCacheBuilder) {
    const originalMethod = descriptor.value;
    switch (originalMethod.length) {
        case 0: {
            switch (strategy) {
                case Strategy.REPLACE: {
                    descriptor.value = function () {
                        const calculated = originalMethod.apply(this);
                        Object.defineProperty(this, propertyKey, {
                            enumerable: descriptor.enumerable,
                            configurable: descriptor.configurable,
                            writable: descriptor.writable,
                            value: function () {
                                return calculated;
                            },
                        });
                    };
                    return;
                }
                case Strategy.WEAKMAP: {
                    const bindingsCache = new WeakMap();
                    descriptor.value = function () {
                        if (bindingsCache.has(this)) {
                            return bindingsCache.get(this);
                        }
                        let calculated = originalMethod.apply(this);
                        bindingsCache.set(this, calculated);
                        return calculated;
                    };
                    break;
                }
            }
            break;
        }
        case 1: {
            switch (strategy) {
                case Strategy.WEAKMAP: {
                    const bindingsCache = new WeakMap();
                    descriptor.value = function (arg) {
                        let argsCache = bindingsCache.get(this);
                        if (!argsCache) {
                            argsCache = argsCacheBuilder();
                            bindingsCache.set(this, argsCache);
                        }
                        if (argsCache.has(arg)) {
                            return argsCache.get(arg);
                        }
                        const memoized = originalMethod.call(this, arg);
                        argsCache.set(arg, memoized);
                        return memoized;
                    };
                    break;
                }
                case Strategy.REPLACE: {
                    descriptor.value = function (arg) {
                        const memoizationContainer = argsCacheBuilder();
                        function replacement(arg) {
                            if (memoizationContainer.has(arg)) {
                                return memoizationContainer.get(arg);
                            }
                            else {
                                const memoized = originalMethod.call(this, arg);
                                memoizationContainer.set(arg, memoized);
                                return memoized;
                            }
                        }
                        Object.defineProperty(this, propertyKey, {
                            configurable: descriptor.configurable,
                            enumerable: descriptor.enumerable,
                            writable: descriptor.writable,
                            value: replacement,
                        });
                        return replacement.call(this, arg);
                    };
                    break;
                }
            }
            break;
        }
        default: {
            switch (strategy) {
                case Strategy.REPLACE: {
                    descriptor.value = function (...args) {
                        const memoizationContainer = argsCacheBuilder();
                        function replacement(...args) {
                            const digest = hashFunction.apply(this, args);
                            if (memoizationContainer.has(digest)) {
                                return memoizationContainer.get(digest);
                            }
                            else {
                                const memoized = originalMethod.apply(this, args);
                                memoizationContainer.set(digest, memoized);
                                return memoized;
                            }
                        }
                        Object.defineProperty(this, propertyKey, {
                            configurable: descriptor.configurable,
                            enumerable: descriptor.enumerable,
                            writable: descriptor.writable,
                            value: replacement,
                        });
                        return replacement.apply(this, args);
                    };
                    break;
                }
                case Strategy.WEAKMAP: {
                    const bindingsCache = new WeakMap();
                    descriptor.value = function replacement(...args) {
                        let argsCache = bindingsCache.get(this);
                        const digest = hashFunction.apply(this, args);
                        if (argsCache?.has(digest)) {
                            return argsCache.get(digest);
                        }
                        if (!argsCache) {
                            argsCache = argsCacheBuilder();
                            bindingsCache.set(this, argsCache);
                        }
                        const memoized = originalMethod.apply(this, args);
                        argsCache.set(digest, memoized);
                        return memoized;
                    };
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21ldGhvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBSUwsUUFBUSxHQUNULE1BQU0sZ0JBQWdCLENBQUM7QUFTeEIsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxLQUFpQztJQUVqQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQzNCLFVBQStCLEVBQy9CLFdBQTRCLEVBQzVCLFFBQWtCLEVBQ2xCLFlBQTBCLEVBQzFCLGdCQUFrQztJQUVsQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBR3hDLFFBQVEsY0FBYyxDQUFDLE1BQU0sRUFBRTtRQUM3QixLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sUUFBUSxRQUFRLEVBQUU7Z0JBRWhCLEtBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNyQixVQUFVLENBQUMsS0FBSyxHQUFHO3dCQUNqQixNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUM5QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7NEJBQ3ZDLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTs0QkFDakMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZOzRCQUNyQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFFBQVE7NEJBQzdCLEtBQUssRUFBRTtnQ0FDTCxPQUFPLFVBQVUsQ0FBQzs0QkFDcEIsQ0FBQzt5QkFDRixDQUFDLENBQUM7b0JBQ0wsQ0FBTSxDQUFDO29CQUNQLE9BQU87aUJBQ1I7Z0JBQ0QsS0FBSyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBRXJCLE1BQU0sYUFBYSxHQUFHLElBQUksT0FBTyxFQUFtQixDQUFDO29CQUNyRCxVQUFVLENBQUMsS0FBSyxH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