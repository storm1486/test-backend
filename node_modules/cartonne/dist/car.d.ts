import { CarVersion } from "./car-version.js";
import { CID } from "multiformats/cid";
import type { IBlock } from "./block.js";
import { bases } from "multiformats/basics";
import type { BlockCodec } from "multiformats/codecs/interface";
import type { SyncMultihashHasher } from "multiformats/hashes/interface";
import { BlockStorage } from "./block-storage.js";
import type { CodecContainer, HasherContainer } from "./codename-container.js";
export type PutOptions = {
    codec: BlockCodec<number, unknown> | string | number;
    hasher: SyncMultihashHasher | string | number;
    isRoot: boolean;
};
export declare class CAR implements Iterable<Uint8Array>, AsyncIterable<Uint8Array> {
    readonly version: CarVersion;
    readonly roots: Array<CID>;
    readonly blocks: BlockStorage;
    readonly codecs: CodecContainer;
    readonly hashers: HasherContainer;
    constructor(version: CarVersion, roots: Array<CID>, blocks: Iterable<IBlock>, codecs: CodecContainer, hashers: HasherContainer);
    put(value: unknown, options?: Partial<PutOptions>): CID;
    delete(key: CID): void;
    get<T extends object = any>(key: CID): T | undefined;
    asV1(): CAR;
    asV2(): CAR;
    get bytes(): Uint8Array;
    toString(base?: keyof typeof bases): string;
    [Symbol.iterator](): Iterator<Uint8Array>;
    [Symbol.asyncIterator](): AsyncIterator<Uint8Array>;
}
//# sourceMappingURL=car.d.ts.map