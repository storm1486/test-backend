function isIterable(iter) {
    return Symbol.iterator in iter;
}
function asIterable(iter) {
    return isIterable(iter) ? iter : { [Symbol.iterator]: () => iter };
}
function isAsyncIterable(iter) {
    return Symbol.asyncIterator in iter;
}
function asAsyncIterable(iter) {
    return isAsyncIterable(iter) ? iter : { [Symbol.asyncIterator]: () => iter };
}
export function concatIterable(iter) {
    const chunks = [];
    let length = 0;
    for (const chunk of asIterable(iter)) {
        chunks.push(chunk);
        length += chunk.length;
    }
    return concat(chunks, length);
}
export async function concatAsyncIterable(iter) {
    const chunks = [];
    let length = 0;
    for await (const chunk of asAsyncIterable(iter)) {
        chunks.push(chunk);
        length += chunk.length;
    }
    return concat(chunks, length);
}
export function concat(arrays, length) {
    if (!length) {
        length = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = new Uint8Array(length);
    let offset = 0;
    for (const arr of arrays) {
        output.set(arr, offset);
        offset += arr.length;
    }
    return new Uint8Array(output);
}
