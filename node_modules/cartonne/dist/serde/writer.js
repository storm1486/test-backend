import { encodeBlock, encodeHeaderV1, encodeHeaderV2 } from "./encoding.js";
export function* writerV1(roots, blocks) {
    yield encodeHeaderV1(roots);
    for (const block of blocks) {
        yield encodeBlock(block);
    }
}
export function* writerV2(roots, blocks) {
    const headerV1 = encodeHeaderV1(roots);
    yield encodeHeaderV2(blocks.encodedLength + headerV1.length);
    yield headerV1;
    for (const block of blocks) {
        yield encodeBlock(block);
    }
}
export function iterableBytes(generator) {
    return {
        [Symbol.iterator]: () => {
            return generator;
        },
        [Symbol.asyncIterator]: () => {
            return asAsyncGenerator(generator);
        },
    };
}
export async function* asAsyncGenerator(sync) {
    for (const chunk of sync) {
        yield chunk;
    }
}
