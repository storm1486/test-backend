export class BlockStorage {
    #blocks = new Map();
    #encodedLength = 0;
    get size() {
        return this.#blocks.size;
    }
    get encodedLength() {
        return this.#encodedLength;
    }
    put(block) {
        if (this.has(block.cid))
            return;
        this.#blocks.set(block.cid.toV1().toString(), block);
        this.#encodedLength += block.encodedLength;
    }
    has(key) {
        return this.#blocks.has(key.toV1().toString());
    }
    get(key) {
        return this.#blocks.get(key.toV1().toString());
    }
    delete(key) {
        const found = this.get(key);
        if (found) {
            this.#encodedLength -= found.encodedLength;
            this.#blocks.delete(key.toV1().toString());
        }
    }
    [Symbol.iterator]() {
        return this.#blocks.values();
    }
    async *[Symbol.asyncIterator]() {
        for (const block of this.#blocks.values()) {
            yield block;
        }
    }
    *cids() {
        for (const block of this) {
            yield block.cid;
        }
    }
}
