import { UnknownCodenameError } from "./unknown-codename.error.js";
export class CodenameContainer {
    name;
    #byName = new Map();
    #byCode = new Map();
    constructor(name) {
        this.name = name;
    }
    add(codec) {
        this.#byCode.set(codec.code, codec);
        this.#byName.set(codec.name, codec);
    }
    has(id) {
        if (typeof id === "string") {
            return this.#byName.has(id);
        }
        return this.#byCode.has(id);
    }
    get(id) {
        const byName = typeof id === "string" && this.#byName.get(id);
        if (byName)
            return byName;
        const byCode = typeof id === "number" && this.#byCode.get(id);
        if (byCode)
            return byCode;
        const byObject = typeof id === "object" && id;
        if (byObject)
            return byObject;
        throw new UnknownCodenameError(this.name, id);
    }
    delete(id) {
        const found = this.get(id);
        if (found) {
            this.#byName.delete(found.name);
            this.#byCode.delete(found.code);
        }
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const entries = Array.from(this.#byName.values()).map(e => `${e.name}(${e.code})`);
        return `CodenameContainer<${this.name}: ${entries.join(', ')}>`;
    }
}
